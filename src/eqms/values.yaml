### Chart specific configs

## GENERAL Application Configurations
eqms: #eqms specific values
  storage:
    class: "tanzu"
  apis:
    - name: usgs
  useTestData: true

## NIFI
nifi:
  eqms:
    #nifi app namespace
    namespace: "eqms-nifi"      #default: eq-mon-nifi
    #toggles http load balancer for dev
    httpLoadBalancer: true      #default: false
    #nifi replica count
    replicas: 1                 #default: 3

## KAFKA OPERATOR
strimzi-kafka-operator:
  namespace: "eqms-kafka"
  watchNamespaces:
    - "eqms-kafka" #TODO: redundant
  serviceAccountCreate: no
  serviceAccount: default
  eqms: #eqms specific values
    #toggles http load balancer for dev
    httpLoadBalancer: true      #default: false
    #nifi replica count
    replicas: 
      kafka: 1                  #default: 3
      zookeeper: 1              #default: 3
      topics: 1                 #default: 3
      s3sinks: 1                #default: 3
    size:
      kafka: 10Gi
      zookeeper: 10Gi

## MINIO OPERATOR
minio-operator:
  eqms:
    namespace: eqms-minio
    bucketName: "eqms"
    #TODO: embedd into user field
    admin:
      name: "minio"
      password: "change-me"
    api:
      name: "eqms-api"
      password: "change-me"
    spark:
      name: "eqms-spark"
      password: "change-me"
    trino:
      name: "eqms-trino"
      password: "change-me"
  tenants:
    - name: storage
      ## Registry location and Tag to download MinIO Server image
      image:
        repository: minio/minio
        tag: latest
        pullPolicy: IfNotPresent
      ## Customize namespace for tenant deployment
      namespace: eqms-minio
      ## Customize any private registry image pull secret.
      ## currently only one secret registry is supported
      imagePullSecret: { }
      ## If a scheduler is specified here, Tenant pods will be dispatched by specified scheduler.
      ## If not specified, the Tenant pods will be dispatched by default scheduler.
      scheduler: { }
      ## Specification for MinIO Pool(s) in this Tenant.
      pools:
        ## Servers specifies the number of MinIO Tenant Pods / Servers in this pool.
        ## For standalone mode, supply 1. For distributed mode, supply 4 or more.
        ## Note that the operator does not support upgrading from standalone to distributed mode.
        - servers: 1
          ## volumesPerServer specifies the number of volumes attached per MinIO Tenant Pod / Server.
          volumesPerServer: 4
          ## size specifies the capacity per volume
          size: 10Gi
          ## storageClass specifies the storage class name to be used for this pool
          storageClassName: "tanzu"
          ## Used to specify a toleration for a pod
          tolerations: { }
          ## nodeSelector parameters for MinIO Pods. It specifies a map of key-value pairs. For the pod to be
          ## eligible to run on a node, the node must have each of the
          ## indicated key-value pairs as labels.
          ## Read more here: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
          nodeSelector: { }
          ## Affinity settings for MinIO pods. Read more about affinity
          ## here: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity.
          affinity: { }
          ## Configure resource requests and limits for MinIO containers
          resources: { }
          ## Configure security context
          securityContext: { }
          ## Configure topology constraints
          topologySpreadConstraints: [ ]
      ## Mount path where PV will be mounted inside container(s).
      mountPath: /export
      ## Sub path inside Mount path where MinIO stores data.
      subPath: /data
      # pool secrets
      secrets:
        # create a kubernetes secret object with the accessKey and secretKey as defined here.
        enabled: true
        name: minio1-secret
        accessKey: minio
        secretKey: change-me
      # pool metrics to be read by Prometheus
      metrics:
        enabled: false
        port: 9000
      certificate:
        ## Use this field to provide one or more external CA certificates. This is used by MinIO
        ## to verify TLS connections with other applications:
        ## https://github.com/minio/minio/tree/master/docs/tls/kubernetes#2-create-kubernetes-secret
        externalCaCertSecret: { }
        ## Use this field to provide a list of Secrets with external certificates. This can be used to to configure
        ## TLS for MinIO Tenant pods. Create secrets as explained here:
        ## https://github.com/minio/minio/tree/master/docs/tls/kubernetes#2-create-kubernetes-secret
        externalCertSecret: { }
        ## Enable automatic Kubernetes based certificate generation and signing as explained in
        ## https://kubernetes.io/docs/tasks/tls/managing-tls-in-a-cluster
        requestAutoCert: false
        ## This field is used only when "requestAutoCert" is set to true. Use this field to set CommonName
        ## for the auto-generated certificate. Internal DNS name for the pod will be used if CommonName is
        ## not provided. DNS name format is *.minio.default.svc.cluster.local
        certConfig: { }
      ## Enable S3 specific features such as Bucket DNS which would allow `buckets` to be
      ## accessible as DNS entries of form `<bucketname>.minio.default.svc.cluster.local`
      s3:
        ## This feature is turned off by default
        bucketDNS: true
      ## PodManagement policy for MinIO Tenant Pods. Can be "OrderedReady" or "Parallel"
      ## Refer https://kubernetes.io/docs/tutorials/stateful-application/basic-stateful-set/#pod-management-policy
      ## for details.
      podManagementPolicy: Parallel
      ## serviceMetadata allows passing additional labels and annotations to MinIO and Console specific
      ## services created by the operator.
      serviceMetadata: { }
      ## Add environment variables to be set in MinIO container (https://github.com/minio/minio/tree/master/docs/config)
      # env:
      #   - name: MINIO_NOTIFY_WEBHOOK_ENABLE_SPARKJOBSPAWNER
      #     value: "on"
      #   - name: MINIO_NOTIFY_WEBHOOK_ENDPOINT_SPARKJOBSPAWNER
      #     value: http://sparkjob-spawner.eqms-spark.svc.cluster.local:5000
      #   - name: MINIO_NOTIFY_WEBHOOK_COMMENT_SPARKJOBSPAWNER
      #     value: "Webhook Test"
      ## PriorityClassName indicates the Pod priority and hence importance of a Pod relative to other Pods.
      ## This is applied to MinIO pods only.
      ## Refer Kubernetes documentation for details https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/#priorityclass/
      priorityClassName: ""

## SPARK OPERATOR
spark-operator:
  serviceAccounts:
    spark:
      # -- Create a service account for spark apps
      create: false
      # -- Optional name for the spark service account
      name: "default"
    sparkoperator:
      # -- Create a service account for the operator
      create: false
      # -- Optional name for the operator service account
      name: "default"
  sparkJobNamespace: "eqms-spark" #TODO: duplicate

## TRINO
trino:
  eqms:
    namespace: "eqms-trino"
  additionalCatalogs:

    #TODO: redundant, add user trino/superset
    #BUG: static adress
    delta_lake: |-
      connector.name=delta_lake
      hive.metastore.uri=thrift://eqms-hive-metastore.default.svc.cluster.local:9083
      hive.s3.endpoint=http://minio.eqms-minio.svc.cluster.local:80
      hive.s3.aws-access-key=eqms-spark
      hive.s3.aws-secret-key=change-me
      hive.s3.region=eu-central-1
      hive.s3.ssl.enabled=false
      hive.s3.path-style-access=true

## SUPERSET
superset:
  # -- Specify service account name to be used
  serviceAccountName: default
  # -- Install additional packages and do any other bootstrap configuration in this script
  # For production clusters it's recommended to build own image with this step done in CI
  # @default -- see `values.yaml`
  bootstrapScript: |
    #!/bin/bash
    if [ ! -f ~/bootstrap ]; then echo "Running Superset with uid {{ .Values.runAsUser }}" > ~/bootstrap; fi
    pip install trino
  # -- The name of the secret which we will use to generate a superset_config.py file
  # Note: this secret must have the key superset_config.py in it and can include other files as well
  # configFromSecret: '{{ template "superset.fullname" . }}-config'
  # -- This can be a list of templated strings
  configFromSecret: "costum-superset-config"

  postgresql:
    enabled: false #using postgres instance from hive
  supersetNode:
    connections:
      db_host: 'eqms-postgresql.default.svc.cluster.local' #BUG: static adress -> should be {{ .Release.Name }}-postg.....
      db_port: "5432" 
      db_user: hive # not changeable right now
      db_pass: hive # not changeable right now
      db_name: metastore # not changeable right now

  image:
    tag: "de9515c29486505e81b530344d564658aa43e153" # change to 2.1.0 for login fix -> requires new build of complete dashboard

  init: # not changeable right now
    adminUser:
      username: "admin"
      password: "change-me"