# load balancer for http web ui
apiVersion: v1
kind: Service
metadata:
  labels:
    app: superset
    app.kubernetes.io/managed-by: Helm
    chart: superset-0.10.5
  name: superset-lb
  namespace: default
spec:
  ports:
  - name: http
    port: 8088
    protocol: TCP
    targetPort: http
  selector:
    app: superset
  type: LoadBalancer

---

apiVersion: v1
data:
  superset_bootstrap.sh: IyEvYmluL2Jhc2gKaWYgWyAhIC1mIH4vYm9vdHN0cmFwIF07IHRoZW4gZWNobyAiUnVubmluZyBTdXBlcnNldCB3aXRoIHVpZCAwIiA+IH4vYm9vdHN0cmFwOyBmaQpwaXAgaW5zdGFsbCB0cmlubwo=
  superset_config.py: aW1wb3J0IG9zCmZyb20gY2FjaGVsaWIucmVkaXMgaW1wb3J0IFJlZGlzQ2FjaGUKCmRlZiBlbnYoa2V5LCBkZWZhdWx0PU5vbmUpOgogICAgcmV0dXJuIG9zLmdldGVudihrZXksIGRlZmF1bHQpCgpNQVBCT1hfQVBJX0tFWSA9IGVudigncGsuZXlKMUlqb2ljMnAxYm1jdGJtVmxaSE10YldGd2N5SXNJbUVpT2lKamJHdHpaWEJxY1hZd00yNTRNM0Z3YmpFeGJEVnZaRGh5SW4wLjNIM1A1UXBhZGUzajRzdFc1d1lWeEEnLCAnJykKQ0FDSEVfQ09ORklHID0gewogICAgICAnQ0FDSEVfVFlQRSc6ICdSZWRpc0NhY2hlJywKICAgICAgJ0NBQ0hFX0RFRkFVTFRfVElNRU9VVCc6IDMwMCwKICAgICAgJ0NBQ0hFX0tFWV9QUkVGSVgnOiAnc3VwZXJzZXRfJywKICAgICAgJ0NBQ0hFX1JFRElTX0hPU1QnOiBlbnYoJ1JFRElTX0hPU1QnKSwKICAgICAgJ0NBQ0hFX1JFRElTX1BPUlQnOiBlbnYoJ1JFRElTX1BPUlQnKSwKICAgICAgJ0NBQ0hFX1JFRElTX1BBU1NXT1JEJzogZW52KCdSRURJU19QQVNTV09SRCcpLAogICAgICAnQ0FDSEVfUkVESVNfREInOiBlbnYoJ1JFRElTX0RCJywgMSksCn0KREFUQV9DQUNIRV9DT05GSUcgPSBDQUNIRV9DT05GSUcKClNRTEFMQ0hFTVlfREFUQUJBU0VfVVJJID0gZiJwb3N0Z3Jlc3FsK3BzeWNvcGcyOi8ve2VudignREJfVVNFUicpfTp7ZW52KCdEQl9QQVNTJyl9QHtlbnYoJ0RCX0hPU1QnKX06e2VudignREJfUE9SVCcpfS97ZW52KCdEQl9OQU1FJyl9IgpTUUxBTENIRU1ZX1RSQUNLX01PRElGSUNBVElPTlMgPSBUcnVlClNFQ1JFVF9LRVkgPSBlbnYoJ1NFQ1JFVF9LRVknLCAndGhpc0lTYVNFQ1JFVF8xMjM0JykKCmNsYXNzIENlbGVyeUNvbmZpZyhvYmplY3QpOgogIENFTEVSWV9JTVBPUlRTID0gKCdzdXBlcnNldC5zcWxfbGFiJywgKQogIENFTEVSWV9BTk5PVEFUSU9OUyA9IHsndGFza3MuYWRkJzogeydyYXRlX2xpbWl0JzogJzEwL3MnfX0KICBCUk9LRVJfVVJMID0gZiJyZWRpczovL3tlbnYoJ1JFRElTX0hPU1QnKX06e2VudignUkVESVNfUE9SVCcpfS8wIgogIENFTEVSWV9SRVNVTFRfQkFDS0VORCA9IGYicmVkaXM6Ly97ZW52KCdSRURJU19IT1NUJyl9OntlbnYoJ1JFRElTX1BPUlQnKX0vMCIKCkNFTEVSWV9DT05GSUcgPSBDZWxlcnlDb25maWcKUkVTVUxUU19CQUNLRU5EID0gUmVkaXNDYWNoZSgKICAgICAgaG9zdD1lbnYoJ1JFRElTX0hPU1QnKSwKICAgICAgcG9ydD1lbnYoJ1JFRElTX1BPUlQnKSwKICAgICAga2V5X3ByZWZpeD0nc3VwZXJzZXRfcmVzdWx0cycKKQoKI2Nvc3R1bSBjb25maWdzClZJWl9UWVBFU19BVkFJTEFCTEUgPSB7CiAgICAjIE90aGVyIHZpc3VhbGl6YXRpb24gdHlwZXMuLi4KICAgICdkZWNrX3NjcmVlbmdyaWQnOiAnU2NyZWVuZ3JpZCcsCiAgICAnZGVja19wYXRoJzogJ1BhdGgnLAogICAgJ2RlY2tfaGV4JzogJ0hleCcsCiAgICAnZGVja19zY2F0dGVyJzogJ1NjYXR0ZXInLAogICAgJ2RlY2tfZ3JpZCc6ICdHcmlkJywKfQoKRkVBVFVSRV9GTEFHUyA9IHsiQUxFUlRfUkVQT1JUUyI6IFRydWUsICJFTkFCTEVfSkFWQVNDUklQVF9DT05UUk9MUyI6VHJ1ZSB9Ck1BUEJPWF9BUElfS0VZID0gJ3BrLmV5SjFJam9pYzJwMWJtY3RibVZsWkhNdGJXRndjeUlzSW1FaU9pSmpiR3R6WlhCcWNYWXdNMjU0TTNGd2JqRXhiRFZ2WkRoeUluMC4zSDNQNVFwYWRlM2o0c3RXNXdZVnhBJw==
  superset_init.sh: IyEvYmluL3NoCnNldCAtZXUKZWNobyAiVXBncmFkaW5nIERCIHNjaGVtYS4uLiIKc3VwZXJzZXQgZGIgdXBncmFkZQplY2hvICJJbml0aWFsaXppbmcgcm9sZXMuLi4iCnN1cGVyc2V0IGluaXQKCmVjaG8gIkNyZWF0aW5nIGFkbWluIHVzZXIuLi4iCnN1cGVyc2V0IGZhYiBjcmVhdGUtYWRtaW4gXAogICAgICAgICAgICAgICAgLS11c2VybmFtZSBhZG1pbiBcCiAgICAgICAgICAgICAgICAtLWZpcnN0bmFtZSBTdXBlcnNldCBcCiAgICAgICAgICAgICAgICAtLWxhc3RuYW1lIEFkbWluIFwKICAgICAgICAgICAgICAgIC0tZW1haWwgYWRtaW5Ac3VwZXJzZXQuY29tIFwKICAgICAgICAgICAgICAgIC0tcGFzc3dvcmQgYWRtaW4gXAogICAgICAgICAgICAgICAgfHwgdHJ1ZQoKZWNobyAiQ3JlYXRpbmcgYXBpIHVzZXIuLi4iCnN1cGVyc2V0IGZhYiBjcmVhdGUtYWRtaW4gXAogICAgICAgICAgICAgICAgLS11c2VybmFtZSBhcGkgXAogICAgICAgICAgICAgICAgLS1maXJzdG5hbWUgU3VwZXJzZXQgXAogICAgICAgICAgICAgICAgLS1sYXN0bmFtZSBBUEkgXAogICAgICAgICAgICAgICAgLS1lbWFpbCBhcGlAc3VwZXJzZXQuY29tIFwKICAgICAgICAgICAgICAgIC0tcGFzc3dvcmQgc3VwZXJzZXQjYXBpK1VzZXIgXAogICAgICAgICAgICAgICAgfHwgdHJ1ZQoKaWYgWyAtZiAiL2FwcC9jb25maWdzL2ltcG9ydF9kYXRhc291cmNlcy55YW1sIiBdOyB0aGVuCiAgZWNobyAiSW1wb3J0aW5nIGRhdGFiYXNlIGNvbm5lY3Rpb25zLi4uLiAiCiAgc3VwZXJzZXQgaW1wb3J0X2RhdGFzb3VyY2VzIC1wIC9hcHAvY29uZmlncy9pbXBvcnRfZGF0YXNvdXJjZXMueWFtbApmaQ==
kind: Secret
metadata:
  labels:
    app: superset
  name: costum-superset-config
type: Opaque

---

#auto deploys a dashboard to the 
apiVersion: batch/v1
kind: Job
metadata:
  name: superset-dashboard-init
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "4"
spec:
  template:
    spec:
      containers:
      - name: init-scripts
        image: dockersilas/python-requests:0.1.0
        command: ["python", "/scripts/init-dashboard.py"]
        volumeMounts:
        - name: init-script-mount
          mountPath: /scripts

      restartPolicy: OnFailure
      volumes:
        - name: init-script-mount
          secret:
            secretName: superset-init-assets
            defaultMode: 0500

---

## wait for minio script
apiVersion: v1
kind: Secret
metadata:
  name: superset-init-assets
data:
  dashboard_export.zip: UEsDBBQAAAAAAAAAIQB2+OzGTQAAAE0AAAAuAAAAZGFzaGJvYXJkX2V4cG9ydF8yMDIzMDgwNFQxOTMyMjIvbWV0YWRhdGEueWFtbHZlcnNpb246IDEuMC4wCnR5cGU6IERhc2hib2FyZAp0aW1lc3RhbXA6ICcyMDIzLTA4LTA0VDE5OjMyOjIyLjA1NDgwNCswMDowMCcKUEsDBBQAAAAAAAAAIQD2ZL4s+SAAAPkgAAA5AAAAZGFzaGJvYXJkX2V4cG9ydF8yMDIzMDgwNFQxOTMyMjIvZGFzaGJvYXJkcy9CYXNpY3NfMi55YW1sZGFzaGJvYXJkX3RpdGxlOiBCYXNpY3MKZGVzY3JpcHRpb246IG51bGwKY3NzOiAnJwpzbHVnOiBudWxsCnV1aWQ6IDY4ZDg3MjBjLWRlZWEtNDQ4NC1hZTk4LWMwM2ZkYzc4MjkzNApwb3NpdGlvbjoKICBDSEFSVC0wRG05Z0l6Sl80OgogICAgY2hpbGRyZW46IFtdCiAgICBpZDogQ0hBUlQtMERtOWdJekpfNAogICAgbWV0YToKICAgICAgY2hhcnRJZDogNAogICAgICBoZWlnaHQ6IDUwCiAgICAgIHNsaWNlTmFtZTogTWFnbml0dWRlLUNvdW50cy1Xb3JsZHdpZGUKICAgICAgdXVpZDogMjU4NjdhZDAtZTcxMy00NTEyLTlkNTYtZjE0ZWRjOWI1OTdiCiAgICAgIHdpZHRoOiAxMgogICAgcGFyZW50czoKICAgIC0gUk9PVF9JRAogICAgLSBHUklEX0lECiAgICAtIFJPVy1BeFBqdUMwVndxCiAgICB0eXBlOiBDSEFSVAogIENIQVJULTBjRjhoSzB1Wms6CiAgICBjaGlsZHJlbjogW10KICAgIGlkOiBDSEFSVC0wY0Y4aEswdVprCiAgICBtZXRhOgogICAgICBjaGFydElkOiAxCiAgICAgIGhlaWdodDogMzkKICAgICAgc2xpY2VOYW1lOiBFYXJ0aHF1YWtlLU9jY3VyZW5jZXMgV29ybGRtYXAKICAgICAgdXVpZDogOTU5NTkzYjgtNmQ2Ny00YjRlLWE2ZjAtZjNjYTU3MTFhOTNhCiAgICAgIHdpZHRoOiA3CiAgICBwYXJlbnRzOgogICAgLSBST09UX0lECiAgICAtIEdSSURfSUQKICAgIC0gUk9XLUl5ZGFiNzlQLWQKICAgIHR5cGU6IENIQVJUCiAgQ0hBUlQtQzBobFRwQXpVRDoKICAgIGNoaWxkcmVuOiBbXQogICAgaWQ6IENIQVJULUMwaGxUcEF6VUQKICAgIG1ldGE6CiAgICAgIGNoYXJ0SWQ6IDUKICAgICAgaGVpZ2h0OiA1MAogICAgICBzbGljZU5hbWU6IE1heC1NYWduaXR1ZGUtT2NjdXJlbmNlcyBXb3JsZG1hcAogICAgICB1dWlkOiBkOGYxYmEzYy0zZmFkLTQ3NDUtOGE4ZS1hOTk0MjMyOGVlNmMKICAgICAgd2lkdGg6IDYKICAgIHBhcmVudHM6CiAgICAtIFJPT1RfSUQKICAgIC0gR1JJRF9JRAogICAgLSBST1ctMV9DS2JYZ0Q0RwogICAgdHlwZTogQ0hBUlQKICBDSEFSVC1felB0OHRUNmZmOgogICAgY2hpbGRyZW46IFtdCiAgICBpZDogQ0hBUlQtX3pQdDh0VDZmZgogICAgbWV0YToKICAgICAgY2hhcnRJZDogMwogICAgICBoZWlnaHQ6IDQyCiAgICAgIHNsaWNlTmFtZTogTWFnbml0dWRlLURlcHRoLVJlbGF0aW9uLVdvcmxkd2lkZQogICAgICB1dWlkOiBhNzBiNjJlZC05ODQ1LTQxNTgtODUxOC1lNmFhMzMxNmQ4ZTYKICAgICAgd2lkdGg6IDUKICAgIHBhcmVudHM6CiAgICAtIFJPT1RfSUQKICAgIC0gR1JJRF9JRAogICAgLSBST1ctSXlkYWI3OVAtZAogICAgdHlwZTogQ0hBUlQKICBDSEFSVC13QlJHR2VtSnZFOgogICAgY2hpbGRyZW46IFtdCiAgICBpZDogQ0hBUlQtd0JSR0dlbUp2RQogICAgbWV0YToKICAgICAgY2hhcnRJZDogMgogICAgICBoZWlnaHQ6IDUwCiAgICAgIHNsaWNlTmFtZTogQ291bnQtT2NjdXJlbmNlcyBXb3JsZG1hcAogICAgICB1dWlkOiAxN2NmMmIwOC03YmE5LTQzNWQtYjIzYy03NDE2NzcxZDA0NDcKICAgICAgd2lkdGg6IDYKICAgIHBhcmVudHM6CiAgICAtIFJPT1RfSUQKICAgIC0gR1JJRF9JRAogICAgLSBST1ctMV9DS2JYZ0Q0RwogICAgdHlwZTogQ0hBUlQKICBEQVNIQk9BUkRfVkVSU0lPTl9LRVk6IHYyCiAgRElWSURFUi1aQm4wSjVhXzVJOgogICAgY2hpbGRyZW46IFtdCiAgICBpZDogRElWSURFUi1aQm4wSjVhXzVJCiAgICBtZXRhOiB7fQogICAgcGFyZW50czoKICAgIC0gUk9PVF9JRAogICAgLSBHUklEX0lECiAgICB0eXBlOiBESVZJREVSCiAgR1JJRF9JRDoKICAgIGNoaWxkcmVuOgogICAgLSBST1ctSXlkYWI3OVAtZAogICAgLSBESVZJREVSLVpCbjBKNWFfNUkKICAgIC0gUk9XLUF4UGp1QzBWd3EKICAgIC0gUk9XLTFfQ0tiWGdENEcKICAgIGlkOiBHUklEX0lECiAgICBwYXJlbnRzOgogICAgLSBST09UX0lECiAgICB0eXBlOiBHUklECiAgSEVBREVSX0lEOgogICAgaWQ6IEhFQURFUl9JRAogICAgbWV0YToKICAgICAgdGV4dDogQmFzaWNzCiAgICB0eXBlOiBIRUFERVIKICBST09UX0lEOgogICAgY2hpbGRyZW46CiAgICAtIEdSSURfSUQKICAgIGlkOiBST09UX0lECiAgICB0eXBlOiBST09UCiAgUk9XLTFfQ0tiWGdENEc6CiAgICBjaGlsZHJlbjoKICAgIC0gQ0hBUlQtQzBobFRwQXpVRAogICAgLSBDSEFSVC13QlJHR2VtSnZFCiAgICBpZDogUk9XLTFfQ0tiWGdENEcKICAgIG1ldGE6CiAgICAgIGJhY2tncm91bmQ6IEJBQ0tHUk9VTkRfVFJBTlNQQVJFTlQKICAgIHBhcmVudHM6CiAgICAtIFJPT1RfSUQKICAgIC0gR1JJRF9JRAogICAgdHlwZTogUk9XCiAgUk9XLUF4UGp1QzBWd3E6CiAgICBjaGlsZHJlbjoKICAgIC0gQ0hBUlQtMERtOWdJekpfNAogICAgaWQ6IFJPVy1BeFBqdUMwVndxCiAgICBtZXRhOgogICAgICBiYWNrZ3JvdW5kOiBCQUNLR1JPVU5EX1RSQU5TUEFSRU5UCiAgICBwYXJlbnRzOgogICAgLSBST09UX0lECiAgICAtIEdSSURfSUQKICAgIHR5cGU6IFJPVwogIFJPVy1JeWRhYjc5UC1kOgogICAgY2hpbGRyZW46CiAgICAtIENIQVJULV96UHQ4dFQ2ZmYKICAgIC0gQ0hBUlQtMGNGOGhLMHVaawogICAgaWQ6IFJPVy1JeWRhYjc5UC1kCiAgICBtZXRhOgogICAgICBiYWNrZ3JvdW5kOiBCQUNLR1JPVU5EX1RSQU5TUEFSRU5UCiAgICBwYXJlbnRzOgogICAgLSBST09UX0lECiAgICAtIEdSSURfSUQKICAgIHR5cGU6IFJPVwptZXRhZGF0YToKICBjaGFydF9jb25maWd1cmF0aW9uOgogICAgJzInOgogICAgICBpZDogMgogICAgICBjcm9zc0ZpbHRlcnM6CiAgICAgICAgc2NvcGU6IGdsb2JhbAogICAgICAgIGNoYXJ0c0luU2NvcGU6CiAgICAgICAgLSAxCiAgICAgICAgLSA0CiAgICAgICAgLSA1CiAgICAgICAgLSA3CiAgICAnNCc6CiAgICAgIGlkOiA0CiAgICAgIGNyb3NzRmlsdGVyczoKICAgICAgICBzY29wZTogZ2xvYmFsCiAgICAgICAgY2hhcnRzSW5TY29wZToKICAgICAgICAtIDEKICAgICAgICAtIDIKICAgICAgICAtIDUKICAgICAgICAtIDcKICBnbG9iYWxfY2hhcnRfY29uZmlndXJhdGlvbjoKICAgIHNjb3BlOgogICAgICByb290UGF0aDoKICAgICAgLSBST09UX0lECiAgICAgIGV4Y2x1ZGVkOiBbXQogICAgY2hhcnRzSW5TY29wZToKICAgIC0gMQogICAgLSAyCiAgICAtIDQKICAgIC0gNQogICAgLSA3CiAgY29sb3Jfc2NoZW1lOiAnJwogIHJlZnJlc2hfZnJlcXVlbmN5OiAwCiAgZXhwYW5kZWRfc2xpY2VzOiB7fQogIGxhYmVsX2NvbG9yczoge30KICB0aW1lZF9yZWZyZXNoX2ltbXVuZV9zbGljZXM6IFtdCiAgY3Jvc3NfZmlsdGVyc19lbmFibGVkOiB0cnVlCiAgZGVmYXVsdF9maWx0ZXJzOiAne30nCiAgc2hhcmVkX2xhYmVsX2NvbG9yczoKICAgIENPVU5UKG1hZ25pdHVkZSk6ICcjNTQ3MEM2JwogICAgJzQuMyc6ICcjMUZBOEM5JwogICAgJzQuNCc6ICcjNUFDMTg5JwogICAgJzQuMic6ICcjNjY2NjY2JwogICAgJzQuNSc6ICcjRkNDNzAwJwogICAgJzQuMSc6ICcjM0NDQ0NCJwogICAgJzQuNic6ICcjOEZEM0U0JwogICAgJzQuMCc6ICcjQUNFMUM0JwogICAgJzIuNic6ICcjQjJCMkIyJwogICAgJzQuNyc6ICcjRkRFMzgwJwogICAgJzQuOSc6ICcjOUVFNUU1JwogICAgJzQuOCc6ICcjNDU0RTdDJwogICAgJzIuOCc6ICcjQTg2OEI3JwogICAgJzIuNyc6ICcjRkVDMEExJwogICAgJzIuOSc6ICcjRDFDNkJDJwogICAgJzMuMCc6ICcjQTM4Rjc5JwogICAgJzUuMCc6ICcjRkY3RjQ0JwogICAgJzMuMSc6ICcjRTA0MzU1JwogICAgJzMuMic6ICcjRDNCM0RBJwogICAgJzIuNSc6ICcjQTFBNkJEJwogICAgJzUuMSc6ICcjRUZBMUFBJwogICAgJzMuMyc6ICcjMUZBOEM5JwogICAgJzMuNCc6ICcjNDU0RTdDJwogICAgJzUuMic6ICcjNUFDMTg5JwogICAgJzMuOCc6ICcjRkY3RjQ0JwogICAgJzMuOSc6ICcjNjY2NjY2JwogICAgJzMuNyc6ICcjRTA0MzU1JwogICAgJzMuNic6ICcjRkNDNzAwJwogICAgJzUuMyc6ICcjQTg2OEI3JwogICAgJzMuNSc6ICcjM0NDQ0NCJwogICAgJzUuNCc6ICcjQTM4Rjc5JwogICAgJzUuNSc6ICcjOEZEM0U0JwogICAgJzUuNic6ICcjQTFBNkJEJwogICAgJzUuNyc6ICcjQUNFMUM0JwogICAgJzIuNTInOiAnI0ZFQzBBMScKICAgICcyLjUzJzogJyNCMkIyQjInCiAgICAnMi41NCc6ICcjRUZBMUFBJwogICAgJzIuNTUnOiAnI0ZERTM4MCcKICAgICc1LjgnOiAnI0QzQjNEQScKICAgICcyLjUxJzogJyM5RUU1RTUnCiAgICAnMi41OSc6ICcjRDFDNkJDJwogICAgJzIuNTYnOiAnIzFGQThDOScKICAgICc1LjknOiAnIzQ1NEU3QycKICAgICcyLjY4JzogJyM1QUMxODknCiAgICAnMi42Myc6ICcjRkY3RjQ0JwogICAgJzIuNjYnOiAnIzY2NjY2NicKICAgICcyLjY0JzogJyNFMDQzNTUnCiAgICAnMi41Nyc6ICcjRkNDNzAwJwogICAgJzYuMCc6ICcjQTg2OEI3JwogICAgJzIuNzQnOiAnIzNDQ0NDQicKICAgICcyLjc3JzogJyNBMzhGNzknCiAgICAnMi42Nyc6ICcjOEZEM0U0JwogICAgJzIuNTgnOiAnI0ExQTZCRCcKICAgICcyLjcyJzogJyNBQ0UxQzQnCiAgICAnMi42NSc6ICcjRkVDMEExJwogICAgJzIuNzUnOiAnI0IyQjJCMicKICAgICczLjQzJzogJyNFRkExQUEnCiAgICAnMi44NCc6ICcjRkRFMzgwJwogICAgJzIuNjEnOiAnI0QzQjNEQScKICAgICczLjA3JzogJyM5RUU1RTUnCiAgICAnMi44OCc6ICcjRDFDNkJDJwogICAgJzIuNjInOiAnIzFGQThDOScKICAgICczLjI0JzogJyM0NTRFN0MnCiAgICAnMy4zOSc6ICcjNUFDMTg5JwogICAgJzIuNzgnOiAnI0ZGN0Y0NCcKICAgICczLjEyJzogJyM2NjY2NjYnCiAgICAnNi4yJzogJyNFMDQzNTUnCiAgICAnMi42OSc6ICcjRkNDNzAwJwogICAgJzIuODEnOiAnI0E4NjhCNycKICAgICc2LjEnOiAnIzNDQ0NDQicKICAgICcyLjg2JzogJyNBMzhGNzknCiAgICAnMi43MSc6ICcjOEZEM0U0JwogICAgJzIuODInOiAnI0ExQTZCRCcKICAgICcyLjc5JzogJyNBQ0UxQzQnCiAgICAnMy40MSc6ICcjRkVDMEExJwogICAgJzIuNzYnOiAnI0IyQjJCMicKICAgICcyLjg3JzogJyNFRkExQUEnCiAgICAnMy4zNyc6ICcjRkRFMzgwJwogICAgJzIuOTknOiAnI0QzQjNEQScKICAgICczLjM1JzogJyM5RUU1RTUnCiAgICAnMi45MSc6ICcjRDFDNkJDJwogICAgJzMuMjEnOiAnIzFGQThDOScKICAgICczLjQyJzogJyM0NTRFN0MnCiAgICAnMi45Nyc6ICcjNUFDMTg5JwogICAgJzYuMyc6ICcjRkY3RjQ0JwogICAgJzMuMTUnOiAnIzY2NjY2NicKICAgICczLjExJzogJyNFMDQzNTUnCiAgICAnMy4wOSc6ICcjRkNDNzAwJwogICAgJzIuODknOiAnI0E4NjhCNycKICAgICcyLjg1JzogJyMzQ0NDQ0InCiAgICAnMy4wMic6ICcjQTM4Rjc5JwogICAgJzMuNjUnOiAnIzhGRDNFNCcKICAgICczLjM4JzogJyNBMUE2QkQnCiAgICAnMy45Myc6ICcjQUNFMUM0JwogICAgJzIuOTInOiAnI0ZFQzBBMScKICAgICczLjIzJzogJyNCMkIyQjInCiAgICAnMy43NCc6ICcjRUZBMUFBJwogICAgJzMuMDYnOiAnI0ZERTM4MCcKICAgICczLjI3JzogJyNEM0IzREEnCiAgICAnMy44NCc6ICcjOUVFNUU1JwogICAgJzMuODInOiAnI0QxQzZCQycKICAgICczLjE4JzogJyMxRkE4QzknCiAgICAnMi45NCc6ICcjNDU0RTdDJwogICAgJzIuNzMnOiAnIzVBQzE4OScKICAgICczLjE0JzogJyNGRjdGNDQnCiAgICAnMy42MSc6ICcjNjY2NjY2JwogICAgJzIuODMnOiAnI0UwNDM1NScKICAgICczLjA0JzogJyNGQ0M3MDAnCiAgICAnMy41Nic6ICcjQTg2OEI3JwogICAgJzYuNSc6ICcjM0NDQ0NCJwogICAgJzIuOTgnOiAnI0EzOEY3OScKICAgICcyLjk1JzogJyM4RkQzRTQnCiAgICAnMy4xOSc6ICcjQTFBNkJEJwogICAgJzMuMTcnOiAnI0FDRTFDNCcKICAgICczLjE2JzogJyNGRUMwQTEnCiAgICAnMy43Nic6ICcjQjJCMkIyJwogICAgJzMuMzInOiAnI0VGQTFBQScKICAgICczLjYyJzogJyNGREUzODAnCiAgICAnMy4wMSc6ICcjRDNCM0RBJwogICAgJzcuMCc6ICcjOUVFNUU1JwogICAgJzMuNDQnOiAnI0QxQzZCQycKICAgICczLjc3JzogJyMxRkE4QzknCiAgICAnMy4wOCc6ICcjNDU0RTdDJwogICAgJzMuMzYnOiAnIzVBQzE4OScKICAgICczLjczJzogJyNGRjdGNDQnCiAgICAnMy4zNCc6ICcjNjY2NjY2JwogICAgJzMuNzEnOiAnI0UwNDM1NScKICAgICczLjAzJzogJyNGQ0M3MDAnCiAgICAnMy4yNic6ICcjQTg2OEI3JwogICAgJzMuOTEnOiAnIzNDQ0NDQicKICAgICczLjA1JzogJyNBMzhGNzknCiAgICAnMy44MSc6ICcjOEZEM0U0JwogICAgJzMuNjknOiAnI0ExQTZCRCcKICAgICczLjY4JzogJyNBQ0UxQzQnCiAgICAnMi45Myc6ICcjRkVDMEExJwogICAgJzMuMjUnOiAnI0IyQjJCMicKICAgICczLjIyJzogJyNFRkExQUEnCiAgICAnMy41NCc6ICcjRkRFMzgwJwogICAgJzMuMTMnOiAnI0QzQjNEQScKICAgICczLjk2JzogJyM5RUU1RTUnCiAgICAnMy40Nic6ICcjRDFDNkJDJwogICAgJzMuODgnOiAnIzFGQThDOScKICAgICczLjMxJzogJyM0NTRFN0MnCiAgICAnNi42JzogJyM1QUMxODknCiAgICAnMy43NSc6ICcjRkY3RjQ0JwogICAgJzMuNzInOiAnIzY2NjY2NicKICAgICc2LjQnOiAnI0UwNDM1NScKICAgICczLjU5JzogJyNGQ0M3MDAnCiAgICAnMy41OCc6ICcjQTg2OEI3JwogICAgJzMuNTcnOiAnIzNDQ0NDQicKICAgICczLjU1JzogJyNBMzhGNzknCiAgICAnMy41Myc6ICcjOEZEM0U0JwogICAgJzMuNTInOiAnI0ExQTZCRCcKICAgICczLjUxJzogJyNBQ0UxQzQnCiAgICAnMy40OCc6ICcjRkVDMEExJwogICAgJzIuOTYnOiAnI0IyQjJCMicKICAgICczLjI5JzogJyNFRkExQUEnCiAgICAnMy4yOCc6ICcjRkRFMzgwJwogICAgJzMuNzgnOiAnI0QzQjNEQScKICAgICczLjY3JzogJyM5RUU1RTUnCiAgICAnMy42Myc6ICcjRDFDNkJDJwogICAgJzcuMSc6ICcjMUZBOEM5JwogICAgJzYuOSc6ICcjNDU0RTdDJwogICAgJzYuOCc6ICcjNUFDMTg5JwogICAgJzMuMzMnOiAnI0ZGN0Y0NCcKICAgICczLjk0JzogJyM2NjY2NjYnCiAgICAnMy44Nic6ICcjRTA0MzU1JwogICAgJzMuODUnOiAnI0ZDQzcwMCcKICAgICczLjc5JzogJyNBODY4QjcnCiAgICAnMy42Nic6ICcjM0NDQ0NCJwogICAgJzMuNDUnOiAnI0EzOEY3OScKICAgICc0LjEyJzogJyM4RkQzRTQnCiAgICAnNC4wOSc6ICcjQTFBNkJEJwogICAgJzQuMDInOiAnI0FDRTFDNCcKICAgICczLjkyJzogJyNGRUMwQTEnCiAgICAnMy44OSc6ICcjQjJCMkIyJwogICAgJzMuODcnOiAnI0VGQTFBQScKICAgICczLjgzJzogJyNGREUzODAnCiAgICAnNy42JzogJyNEM0IzREEnCiAgICAnMy42NCc6ICcjOUVFNUU1JwogICAgJzcuMic6ICcjRDFDNkJDJwogICAgJzMuNDknOiAnIzFGQThDOScKICAgICc2LjcnOiAnIzQ1NEU3QycKICAgICc0LjI4JzogJyM1QUMxODknCiAgICAnNC4yNic6ICcjRkY3RjQ0JwogICAgJzQuMTgnOiAnIzY2NjY2NicKICAgICc0LjE2JzogJyNFMDQzNTUnCiAgICAnNC4wNSc6ICcjRkNDNzAwJwogICAgJzMuOTcnOiAnI0E4NjhCNycKICAgICczLjk1JzogJyMzQ0NDQ0InCiAgICAnMy40Nyc6ICcjQTM4Rjc5JwogICAgJzQuNTcnOiAnIzhGRDNFNCcKICAgICc0LjQxJzogJyNBMUE2QkQnCiAgICAnNC4zNSc6ICcjQUNFMUM0JwogICAgJzQuMTcnOiAnI0ZFQzBBMScKICAgICc0LjE1JzogJyNCMkIyQjInCiAgICAnNC4xMyc6ICcjRUZBMUFBJwogICAgJzQuMDgnOiAnI0ZERTM4MCcKICAgICc0LjAzJzogJyNEM0IzREEnCiAgICAnNC4wMSc6ICcjOUVFNUU1JwogICAgJzcuOCc6ICcjRDFDNkJDJwogICAgJzcuNyc6ICcjMUZBOEM5JwogICAgJzcuNSc6ICcjNDU0RTdDJwogICAgJzUuNTgnOiAnIzVBQzE4OScKICAgICc1LjQ4JzogJyNGRjdGNDQnCiAgICAnMi42OTAwMDAwNic6ICcjNjY2NjY2JwogICAgJzUuMzUnOiAnI0UwNDM1NScKICAgICc1LjE2JzogJyNGQ0M3MDAnCiAgICAnNC43OCc6ICcjQTg2OEI3JwogICAgJzQuNTQnOiAnIzNDQ0NDQicKICAgICc0LjQ1JzogJyNBMzhGNzknCiAgICAnNC40NCc6ICcjOEZEM0U0JwogICAgJzQuNDMnOiAnI0ExQTZCRCcKICAgICc0LjQyJzogJyNBQ0UxQzQnCiAgICAnNC4zMyc6ICcjRkVDMEExJwogICAgJzQuMjknOiAnI0IyQjJCMicKICAgICc0LjE5JzogJyNFRkExQUEnCiAgICAnNC4wNCc6ICcjRkRFMzgwJwogICAgJzMuOTknOiAnI0QzQjNEQScKICAgICczLjk4JzogJyM5RUU1RTUnCiAgICAnMy4wMzAwMDAwMDAwMDAwMDAyJzogJyNEMUM2QkMnCiAgICAnMi44MDAwMDAwMDAwMDAwMDAzJzogJyMxRkE4QzknCiAgICAnMi43NTk5OTk5OSc6ICcjNDU0RTdDJwogICAgJzIuNzIwMDAwMDMnOiAnIzVBQzE4OScKICAgICcyLjYwOTk5OTknOiAnI0ZGN0Y0NCcKICAgICcyLjU2OTk5OTkzJzogJyM2NjY2NjYnCiAgICAnMi41MzAwMDAwMDAwMDAwMDAyJzogJyNFMDQzNTUnCiAgICAnMi41Mjk5OTk5Nyc6ICcjRkNDNzAwJwogICAgJzIuNTE5OTk5OTgnOiAnI0E4NjhCNycKICBjb2xvcl9zY2hlbWVfZG9tYWluOiBbXQp2ZXJzaW9uOiAxLjAuMApQSwMEFAAAAAAAAAAhAEIjtrQVFgAAFRYAAEkAAABkYXNoYm9hcmRfZXhwb3J0XzIwMjMwODA0VDE5MzIyMi9jaGFydHMvTWFnbml0dWRlLUNvdW50cy1Xb3JsZHdpZGVfNC55YW1sc2xpY2VfbmFtZTogTWFnbml0dWRlLUNvdW50cy1Xb3JsZHdpZGUKZGVzY3JpcHRpb246IG51bGwKY2VydGlmaWVkX2J5OiBudWxsCmNlcnRpZmljYXRpb25fZGV0YWlsczogbnVsbAp2aXpfdHlwZTogZWNoYXJ0c190aW1lc2VyaWVzX2xpbmUKcGFyYW1zOgogIGRhdGFzb3VyY2U6IDFfX3RhYmxlCiAgdml6X3R5cGU6IGVjaGFydHNfdGltZXNlcmllc19saW5lCiAgc2xpY2VfaWQ6IDQKICB4X2F4aXM6IG1hZ25pdHVkZQogIHRpbWVfZ3JhaW5fc3FsYTogUDFECiAgeF9heGlzX3NvcnRfYXNjOiB0cnVlCiAgeF9heGlzX3NvcnRfc2VyaWVzOiBuYW1lCiAgeF9heGlzX3NvcnRfc2VyaWVzX2FzY2VuZGluZzogdHJ1ZQogIG1ldHJpY3M6CiAgLSBhZ2dyZWdhdGU6IENPVU5UCiAgICBjb2x1bW46CiAgICAgIGFkdmFuY2VkX2RhdGFfdHlwZTogbnVsbAogICAgICBjZXJ0aWZpY2F0aW9uX2RldGFpbHM6IG51bGwKICAgICAgY2VydGlmaWVkX2J5OiBudWxsCiAgICAgIGNvbHVtbl9uYW1lOiBtYWduaXR1ZGUKICAgICAgZGVzY3JpcHRpb246IG51bGwKICAgICAgZXhwcmVzc2lvbjogbnVsbAogICAgICBmaWx0ZXJhYmxlOiB0cnVlCiAgICAgIGdyb3VwYnk6IHRydWUKICAgICAgaWQ6IDQKICAgICAgaXNfY2VydGlmaWVkOiBmYWxzZQogICAgICBpc19kdHRtOiBmYWxzZQogICAgICBweXRob25fZGF0ZV9mb3JtYXQ6IG51bGwKICAgICAgdHlwZTogRE9VQkxFCiAgICAgIHR5cGVfZ2VuZXJpYzogMAogICAgICB2ZXJib3NlX25hbWU6IG51bGwKICAgICAgd2FybmluZ19tYXJrZG93bjogbnVsbAogICAgZGF0YXNvdXJjZVdhcm5pbmc6IGZhbHNlCiAgICBleHByZXNzaW9uVHlwZTogU0lNUExFCiAgICBoYXNDdXN0b21MYWJlbDogZmFsc2UKICAgIGxhYmVsOiBDT1VOVChtYWduaXR1ZGUpCiAgICBvcHRpb25OYW1lOiBtZXRyaWNfdWlqamY3ZXZjb21fYTB2Zm9pdnJtOGkKICAgIHNxbEV4cHJlc3Npb246IG51bGwKICBncm91cGJ5OiBbXQogIGFkaG9jX2ZpbHRlcnM6CiAgLSBjbGF1c2U6IFdIRVJFCiAgICBjb21wYXJhdG9yOiBObyBmaWx0ZXIKICAgIGV4cHJlc3Npb25UeXBlOiBTSU1QTEUKICAgIG9wZXJhdG9yOiBURU1QT1JBTF9SQU5HRQogICAgc3ViamVjdDogdGltZQogIG9yZGVyX2Rlc2M6IHRydWUKICByb3dfbGltaXQ6IDEwMDAwCiAgdHJ1bmNhdGVfbWV0cmljOiB0cnVlCiAgc2hvd19lbXB0eV9jb2x1bW5zOiB0cnVlCiAgY29tcGFyaXNvbl90eXBlOiB2YWx1ZXMKICBhbm5vdGF0aW9uX2xheWVyczogW10KICBmb3JlY2FzdFBlcmlvZHM6IDEwCiAgZm9yZWNhc3RJbnRlcnZhbDogMC44CiAgeF9heGlzX3RpdGxlOiBNYWduaXR1ZGUKICB4X2F4aXNfdGl0bGVfbWFyZ2luOiAxNQogIHlfYXhpc190aXRsZTogQ291bnQKICB5X2F4aXNfdGl0bGVfbWFyZ2luOiAzMAogIHlfYXhpc190aXRsZV9wb3NpdGlvbjogTGVmdAogIHNvcnRfc2VyaWVzX3R5cGU6IHN1bQogIGNvbG9yX3NjaGVtZTogZWNoYXJ0czVDb2xvcnMKICBzZXJpZXNUeXBlOiBsaW5lCiAgc2hvd192YWx1ZTogZmFsc2UKICBvbmx5X3RvdGFsOiB0cnVlCiAgYXJlYTogZmFsc2UKICBvcGFjaXR5OiAwLjIKICBtYXJrZXJTaXplOiA2CiAgc2hvd19sZWdlbmQ6IHRydWUKICBsZWdlbmRUeXBlOiBzY3JvbGwKICBsZWdlbmRPcmllbnRhdGlvbjogdG9wCiAgeF9heGlzX3RpbWVfZm9ybWF0OiBzbWFydF9kYXRlCiAgcmljaF90b29sdGlwOiB0cnVlCiAgdG9vbHRpcFNvcnRCeU1ldHJpYzogZmFsc2UKICB0b29sdGlwVGltZUZvcm1hdDogc21hcnRfZGF0ZQogIHlfYXhpc19mb3JtYXQ6IFNNQVJUX05VTUJFUgogIGxvZ0F4aXM6IGZhbHNlCiAgbWlub3JTcGxpdExpbmU6IHRydWUKICB0cnVuY2F0ZVlBeGlzOiBmYWxzZQogIHlfYXhpc19ib3VuZHM6CiAgLSBudWxsCiAgLSBudWxsCiAgZXh0cmFfZm9ybV9kYXRhOiB7fQogIGRhc2hib2FyZHM6IFtdCnF1ZXJ5X2NvbnRleHQ6ICd7ImRhdGFzb3VyY2UiOnsiaWQiOjEsInR5cGUiOiJ0YWJsZSJ9LCJmb3JjZSI6ZmFsc2UsInF1ZXJpZXMiOlt7ImZpbHRlcnMiOlt7ImNvbCI6InRpbWUiLCJvcCI6IlRFTVBPUkFMX1JBTkdFIiwidmFsIjoiTm8KICBmaWx0ZXIifV0sImV4dHJhcyI6eyJoYXZpbmciOiIiLCJ3aGVyZSI6IiJ9LCJhcHBsaWVkX3RpbWVfZXh0cmFzIjp7fSwiY29sdW1ucyI6W3sidGltZUdyYWluIjoiUDFEIiwiY29sdW1uVHlwZSI6IkJBU0VfQVhJUyIsInNxbEV4cHJlc3Npb24iOiJtYWduaXR1ZGUiLCJsYWJlbCI6Im1hZ25pdHVkZSIsImV4cHJlc3Npb25UeXBlIjoiU1FMIn1dLCJtZXRyaWNzIjpbeyJhZ2dyZWdhdGUiOiJDT1VOVCIsImNvbHVtbiI6eyJhZHZhbmNlZF9kYXRhX3R5cGUiOm51bGwsImNlcnRpZmljYXRpb25fZGV0YWlscyI6bnVsbCwiY2VydGlmaWVkX2J5IjpudWxsLCJjb2x1bW5fbmFtZSI6Im1hZ25pdHVkZSIsImRlc2NyaXB0aW9uIjpudWxsLCJleHByZXNzaW9uIjpudWxsLCJmaWx0ZXJhYmxlIjp0cnVlLCJncm91cGJ5Ijp0cnVlLCJpZCI6NCwiaXNfY2VydGlmaWVkIjpmYWxzZSwiaXNfZHR0bSI6ZmFsc2UsInB5dGhvbl9kYXRlX2Zvcm1hdCI6bnVsbCwidHlwZSI6IkRPVUJMRSIsInR5cGVfZ2VuZXJpYyI6MCwidmVyYm9zZV9uYW1lIjpudWxsLCJ3YXJuaW5nX21hcmtkb3duIjpudWxsfSwiZGF0YXNvdXJjZVdhcm5pbmciOmZhbHNlLCJleHByZXNzaW9uVHlwZSI6IlNJTVBMRSIsImhhc0N1c3RvbUxhYmVsIjpmYWxzZSwibGFiZWwiOiJDT1VOVChtYWduaXR1ZGUpIiwib3B0aW9uTmFtZSI6Im1ldHJpY191aWpqZjdldmNvbV9hMHZmb2l2cm04aSIsInNxbEV4cHJlc3Npb24iOm51bGx9XSwib3JkZXJieSI6W1t7ImFnZ3JlZ2F0ZSI6IkNPVU5UIiwiY29sdW1uIjp7ImFkdmFuY2VkX2RhdGFfdHlwZSI6bnVsbCwiY2VydGlmaWNhdGlvbl9kZXRhaWxzIjpudWxsLCJjZXJ0aWZpZWRfYnkiOm51bGwsImNvbHVtbl9uYW1lIjoibWFnbml0dWRlIiwiZGVzY3JpcHRpb24iOm51bGwsImV4cHJlc3Npb24iOm51bGwsImZpbHRlcmFibGUiOnRydWUsImdyb3VwYnkiOnRydWUsImlkIjo0LCJpc19jZXJ0aWZpZWQiOmZhbHNlLCJpc19kdHRtIjpmYWxzZSwicHl0aG9uX2RhdGVfZm9ybWF0IjpudWxsLCJ0eXBlIjoiRE9VQkxFIiwidHlwZV9nZW5lcmljIjowLCJ2ZXJib3NlX25hbWUiOm51bGwsIndhcm5pbmdfbWFya2Rvd24iOm51bGx9LCJkYXRhc291cmNlV2FybmluZyI6ZmFsc2UsImV4cHJlc3Npb25UeXBlIjoiU0lNUExFIiwiaGFzQ3VzdG9tTGFiZWwiOmZhbHNlLCJsYWJlbCI6IkNPVU5UKG1hZ25pdHVkZSkiLCJvcHRpb25OYW1lIjoibWV0cmljX3VpampmN2V2Y29tX2EwdmZvaXZybThpIiwic3FsRXhwcmVzc2lvbiI6bnVsbH0sZmFsc2VdXSwiYW5ub3RhdGlvbl9sYXllcnMiOltdLCJyb3dfbGltaXQiOjEwMDAwLCJzZXJpZXNfY29sdW1ucyI6W10sInNlcmllc19saW1pdCI6MCwib3JkZXJfZGVzYyI6dHJ1ZSwidXJsX3BhcmFtcyI6e30sImN1c3RvbV9wYXJhbXMiOnt9LCJjdXN0b21fZm9ybV9kYXRhIjp7fSwidGltZV9vZmZzZXRzIjpbXSwicG9zdF9wcm9jZXNzaW5nIjpbeyJvcGVyYXRpb24iOiJwaXZvdCIsIm9wdGlvbnMiOnsiaW5kZXgiOlsibWFnbml0dWRlIl0sImNvbHVtbnMiOltdLCJhZ2dyZWdhdGVzIjp7IkNPVU5UKG1hZ25pdHVkZSkiOnsib3BlcmF0b3IiOiJtZWFuIn19LCJkcm9wX21pc3NpbmdfY29sdW1ucyI6ZmFsc2V9fSx7Im9wZXJhdGlvbiI6ImZsYXR0ZW4ifV19XSwiZm9ybV9kYXRhIjp7ImFkaG9jX2ZpbHRlcnMiOlt7ImNsYXVzZSI6IldIRVJFIiwiY29tcGFyYXRvciI6Ik5vCiAgZmlsdGVyIiwiZXhwcmVzc2lvblR5cGUiOiJTSU1QTEUiLCJvcGVyYXRvciI6IlRFTVBPUkFMX1JBTkdFIiwic3ViamVjdCI6InRpbWUifV0sImFubm90YXRpb25fbGF5ZXJzIjpbXSwiYXJlYSI6ZmFsc2UsImNvbG9yX3NjaGVtZSI6ImVjaGFydHM1Q29sb3JzIiwiY29tcGFyaXNvbl90eXBlIjoidmFsdWVzIiwiZGFzaGJvYXJkcyI6W10sImRhdGFzb3VyY2UiOiIxX190YWJsZSIsImV4dHJhX2Zvcm1fZGF0YSI6e30sImZvcmVjYXN0SW50ZXJ2YWwiOjAuOCwiZm9yZWNhc3RQZXJpb2RzIjoxMCwiZ3JvdXBieSI6W10sImxlZ2VuZE9yaWVudGF0aW9uIjoidG9wIiwibGVnZW5kVHlwZSI6InNjcm9sbCIsImxvZ0F4aXMiOmZhbHNlLCJtYXJrZXJTaXplIjo2LCJtZXRyaWNzIjpbeyJhZ2dyZWdhdGUiOiJDT1VOVCIsImNvbHVtbiI6eyJhZHZhbmNlZF9kYXRhX3R5cGUiOm51bGwsImNlcnRpZmljYXRpb25fZGV0YWlscyI6bnVsbCwiY2VydGlmaWVkX2J5IjpudWxsLCJjb2x1bW5fbmFtZSI6Im1hZ25pdHVkZSIsImRlc2NyaXB0aW9uIjpudWxsLCJleHByZXNzaW9uIjpudWxsLCJmaWx0ZXJhYmxlIjp0cnVlLCJncm91cGJ5Ijp0cnVlLCJpZCI6NCwiaXNfY2VydGlmaWVkIjpmYWxzZSwiaXNfZHR0bSI6ZmFsc2UsInB5dGhvbl9kYXRlX2Zvcm1hdCI6bnVsbCwidHlwZSI6IkRPVUJMRSIsInR5cGVfZ2VuZXJpYyI6MCwidmVyYm9zZV9uYW1lIjpudWxsLCJ3YXJuaW5nX21hcmtkb3duIjpudWxsfSwiZGF0YXNvdXJjZVdhcm5pbmciOmZhbHNlLCJleHByZXNzaW9uVHlwZSI6IlNJTVBMRSIsImhhc0N1c3RvbUxhYmVsIjpmYWxzZSwibGFiZWwiOiJDT1VOVChtYWduaXR1ZGUpIiwib3B0aW9uTmFtZSI6Im1ldHJpY191aWpqZjdldmNvbV9hMHZmb2l2cm04aSIsInNxbEV4cHJlc3Npb24iOm51bGx9XSwibWlub3JTcGxpdExpbmUiOnRydWUsIm9ubHlfdG90YWwiOnRydWUsIm9wYWNpdHkiOjAuMiwib3JkZXJfZGVzYyI6dHJ1ZSwicmljaF90b29sdGlwIjp0cnVlLCJyb3dfbGltaXQiOjEwMDAwLCJzZXJpZXNUeXBlIjoibGluZSIsInNob3dfZW1wdHlfY29sdW1ucyI6dHJ1ZSwic2hvd19sZWdlbmQiOnRydWUsInNob3dfdmFsdWUiOmZhbHNlLCJzbGljZV9pZCI6NCwic29ydF9zZXJpZXNfdHlwZSI6InN1bSIsInRpbWVfZ3JhaW5fc3FsYSI6IlAxRCIsInRvb2x0aXBTb3J0QnlNZXRyaWMiOmZhbHNlLCJ0b29sdGlwVGltZUZvcm1hdCI6InNtYXJ0X2RhdGUiLCJ0cnVuY2F0ZVlBeGlzIjpmYWxzZSwidHJ1bmNhdGVfbWV0cmljIjp0cnVlLCJ2aXpfdHlwZSI6ImVjaGFydHNfdGltZXNlcmllc19saW5lIiwieF9heGlzIjoibWFnbml0dWRlIiwieF9heGlzX3NvcnRfYXNjIjp0cnVlLCJ4X2F4aXNfc29ydF9zZXJpZXMiOiJuYW1lIiwieF9heGlzX3NvcnRfc2VyaWVzX2FzY2VuZGluZyI6dHJ1ZSwieF9heGlzX3RpbWVfZm9ybWF0Ijoic21hcnRfZGF0ZSIsInhfYXhpc190aXRsZSI6Ik1hZ25pdHVkZSIsInhfYXhpc190aXRsZV9tYXJnaW4iOjE1LCJ5X2F4aXNfYm91bmRzIjpbbnVsbCxudWxsXSwieV9heGlzX2Zvcm1hdCI6IlNNQVJUX05VTUJFUiIsInlfYXhpc190aXRsZSI6IkNvdW50IiwieV9heGlzX3RpdGxlX21hcmdpbiI6MzAsInlfYXhpc190aXRsZV9wb3NpdGlvbiI6IkxlZnQiLCJmb3JjZSI6ZmFsc2UsInJlc3VsdF9mb3JtYXQiOiJqc29uIiwicmVzdWx0X3R5cGUiOiJmdWxsIn0sInJlc3VsdF9mb3JtYXQiOiJqc29uIiwicmVzdWx0X3R5cGUiOiJmdWxsIn0nCmNhY2hlX3RpbWVvdXQ6IG51bGwKdXVpZDogMjU4NjdhZDAtZTcxMy00NTEyLTlkNTYtZjE0ZWRjOWI1OTdiCnZlcnNpb246IDEuMC4wCmRhdGFzZXRfdXVpZDogM2FjOTU1Y2UtNGMxMy00MzM5LTgwN2ItN2MxODVjN2MxYzJjClBLAwQUAAAAAAAAACEAlJ0KPMgLAADICwAAPQAAAGRhc2hib2FyZF9leHBvcnRfMjAyMzA4MDRUMTkzMjIyL2RhdGFzZXRzL1RyaW5vL0VRX0Jhc2ljLnlhbWx0YWJsZV9uYW1lOiBFUV9CYXNpYwptYWluX2R0dG1fY29sOiBudWxsCmRlc2NyaXB0aW9uOiBudWxsCmRlZmF1bHRfZW5kcG9pbnQ6IG51bGwKb2Zmc2V0OiAwCmNhY2hlX3RpbWVvdXQ6IG51bGwKc2NoZW1hOiBkZWx0YWJhc2UKc3FsOiAiU0VMRUNUIERJU1RJTkNUXG4gIGlkLFxuICB0aW1lIGFzIHRpbWVzdGFtcCxcbiAgZnJvbV91bml4dGltZSh0aW1lLzEwMDApIGFzXAogIFwgZGF0ZXRpbWVfdXRjLFxuICBjYXN0KGRhdGVfZm9ybWF0KGZyb21fdW5peHRpbWUodGltZS8xMDAwKSwgJyVZLSVtLSVkJykgYXMgREFURSlcCiAgXCBhcyBkYXRlLFxuICBjYXN0KGRhdGVfZm9ybWF0KGZyb21fdW5peHRpbWUodGltZS8xMDAwKSwgJyVIOiVpOiVzJykgYXMgVElNRSkgYXNcCiAgXCB0aW1lLFxuICBsb25naXR1ZGUsXG4gIGxhdGl0dWRlLFxuICBkZXB0aCxcbiAgbWFnIGFzIG1hZ25pdHVkZVxuRlJPTSBcbiAgZXFtcyIKcGFyYW1zOiBudWxsCnRlbXBsYXRlX3BhcmFtczogbnVsbApmaWx0ZXJfc2VsZWN0X2VuYWJsZWQ6IGZhbHNlCmZldGNoX3ZhbHVlc19wcmVkaWNhdGU6IG51bGwKZXh0cmE6IG51bGwKdXVpZDogM2FjOTU1Y2UtNGMxMy00MzM5LTgwN2ItN2MxODVjN2MxYzJjCm1ldHJpY3M6Ci0gbWV0cmljX25hbWU6IGNvdW50CiAgdmVyYm9zZV9uYW1lOiBudWxsCiAgbWV0cmljX3R5cGU6IG51bGwKICBleHByZXNzaW9uOiBjb3VudCgqKQogIGRlc2NyaXB0aW9uOiBudWxsCiAgZDNmb3JtYXQ6IG51bGwKICBjdXJyZW5jeTogbnVsbAogIGV4dHJhOgogICAgd2FybmluZ19tYXJrZG93bjogJycKICB3YXJuaW5nX3RleHQ6IG51bGwKY29sdW1uczoKLSBjb2x1bW5fbmFtZTogZGF0ZXRpbWVfdXRjCiAgdmVyYm9zZV9uYW1lOiBudWxsCiAgaXNfZHR0bTogdHJ1ZQogIGlzX2FjdGl2ZTogdHJ1ZQogIHR5cGU6IFRJTUVTVEFNUCgzKSBXSVRIIFRJTUUgWk9ORQogIGFkdmFuY2VkX2RhdGFfdHlwZTogbnVsbAogIGdyb3VwYnk6IHRydWUKICBmaWx0ZXJhYmxlOiB0cnVlCiAgZXhwcmVzc2lvbjogbnVsbAogIGRlc2NyaXB0aW9uOiBudWxsCiAgcHl0aG9uX2RhdGVfZm9ybWF0OiBudWxsCiAgZXh0cmE6IHt9Ci0gY29sdW1uX25hbWU6IHRpbWUKICB2ZXJib3NlX25hbWU6IG51bGwKICBpc19kdHRtOiB0cnVlCiAgaXNfYWN0aXZlOiB0cnVlCiAgdHlwZTogVElNRSgzKQogIGFkdmFuY2VkX2RhdGFfdHlwZTogbnVsbAogIGdyb3VwYnk6IHRydWUKICBmaWx0ZXJhYmxlOiB0cnVlCiAgZXhwcmVzc2lvbjogbnVsbAogIGRlc2NyaXB0aW9uOiBudWxsCiAgcHl0aG9uX2RhdGVfZm9ybWF0OiBudWxsCiAgZXh0cmE6IHt9Ci0gY29sdW1uX25hbWU6IGlkCiAgdmVyYm9zZV9uYW1lOiBudWxsCiAgaXNfZHR0bTogZmFsc2UKICBpc19hY3RpdmU6IHRydWUKICB0eXBlOiBWQVJDSEFSCiAgYWR2YW5jZWRfZGF0YV90eXBlOiBudWxsCiAgZ3JvdXBieTogdHJ1ZQogIGZpbHRlcmFibGU6IHRydWUKICBleHByZXNzaW9uOiBudWxsCiAgZGVzY3JpcHRpb246IG51bGwKICBweXRob25fZGF0ZV9mb3JtYXQ6IG51bGwKICBleHRyYToge30KLSBjb2x1bW5fbmFtZTogZGF0ZQogIHZlcmJvc2VfbmFtZTogbnVsbAogIGlzX2R0dG06IHRydWUKICBpc19hY3RpdmU6IHRydWUKICB0eXBlOiBEQVRFCiAgYWR2YW5jZWRfZGF0YV90eXBlOiBudWxsCiAgZ3JvdXBieTogdHJ1ZQogIGZpbHRlcmFibGU6IHRydWUKICBleHByZXNzaW9uOiBudWxsCiAgZGVzY3JpcHRpb246IG51bGwKICBweXRob25fZGF0ZV9mb3JtYXQ6IG51bGwKICBleHRyYToge30KLSBjb2x1bW5fbmFtZTogbWFnbml0dWRlCiAgdmVyYm9zZV9uYW1lOiBudWxsCiAgaXNfZHR0bTogZmFsc2UKICBpc19hY3RpdmU6IHRydWUKICB0eXBlOiBET1VCTEUKICBhZHZhbmNlZF9kYXRhX3R5cGU6IG51bGwKICBncm91cGJ5OiB0cnVlCiAgZmlsdGVyYWJsZTogdHJ1ZQogIGV4cHJlc3Npb246IG51bGwKICBkZXNjcmlwdGlvbjogbnVsbAogIHB5dGhvbl9kYXRlX2Zvcm1hdDogbnVsbAogIGV4dHJhOiB7fQotIGNvbHVtbl9uYW1lOiBsYXRpdHVkZQogIHZlcmJvc2VfbmFtZTogbnVsbAogIGlzX2R0dG06IGZhbHNlCiAgaXNfYWN0aXZlOiB0cnVlCiAgdHlwZTogRE9VQkxFCiAgYWR2YW5jZWRfZGF0YV90eXBlOiBudWxsCiAgZ3JvdXBieTogdHJ1ZQogIGZpbHRlcmFibGU6IHRydWUKICBleHByZXNzaW9uOiBudWxsCiAgZGVzY3JpcHRpb246IG51bGwKICBweXRob25fZGF0ZV9mb3JtYXQ6IG51bGwKICBleHRyYToge30KLSBjb2x1bW5fbmFtZTogbG9uZ2l0dWRlCiAgdmVyYm9zZV9uYW1lOiBudWxsCiAgaXNfZHR0bTogZmFsc2UKICBpc19hY3RpdmU6IHRydWUKICB0eXBlOiBET1VCTEUKICBhZHZhbmNlZF9kYXRhX3R5cGU6IG51bGwKICBncm91cGJ5OiB0cnVlCiAgZmlsdGVyYWJsZTogdHJ1ZQogIGV4cHJlc3Npb246IG51bGwKICBkZXNjcmlwdGlvbjogbnVsbAogIHB5dGhvbl9kYXRlX2Zvcm1hdDogbnVsbAogIGV4dHJhOiB7fQotIGNvbHVtbl9uYW1lOiBkZXB0aAogIHZlcmJvc2VfbmFtZTogbnVsbAogIGlzX2R0dG06IGZhbHNlCiAgaXNfYWN0aXZlOiB0cnVlCiAgdHlwZTogRE9VQkxFCiAgYWR2YW5jZWRfZGF0YV90eXBlOiBudWxsCiAgZ3JvdXBieTogdHJ1ZQogIGZpbHRlcmFibGU6IHRydWUKICBleHByZXNzaW9uOiBudWxsCiAgZGVzY3JpcHRpb246IG51bGwKICBweXRob25fZGF0ZV9mb3JtYXQ6IG51bGwKICBleHRyYToge30KLSBjb2x1bW5fbmFtZTogdGltZXN0YW1wCiAgdmVyYm9zZV9uYW1lOiBudWxsCiAgaXNfZHR0bTogZmFsc2UKICBpc19hY3RpdmU6IHRydWUKICB0eXBlOiBCSUdJTlQKICBhZHZhbmNlZF9kYXRhX3R5cGU6IG51bGwKICBncm91cGJ5OiB0cnVlCiAgZmlsdGVyYWJsZTogdHJ1ZQogIGV4cHJlc3Npb246IG51bGwKICBkZXNjcmlwdGlvbjogbnVsbAogIHB5dGhvbl9kYXRlX2Zvcm1hdDogbnVsbAogIGV4dHJhOiB7fQp2ZXJzaW9uOiAxLjAuMApkYXRhYmFzZV91dWlkOiAzNzI3OGY5My00NmNlLTRiNjMtYmEzMy1lYzU3M2YyMGUwOTQKUEsDBBQAAAAAAAAAIQDxwo2EQwEAAEMBAAA1AAAAZGFzaGJvYXJkX2V4cG9ydF8yMDIzMDgwNFQxOTMyMjIvZGF0YWJhc2VzL1RyaW5vLnlhbWxkYXRhYmFzZV9uYW1lOiBUcmlubwpzcWxhbGNoZW15X3VyaTogdHJpbm86Ly9yb290QGVxbXMtdHJpbm86ODA4MC9kZWx0YV9sYWtlCmNhY2hlX3RpbWVvdXQ6IG51bGwKZXhwb3NlX2luX3NxbGxhYjogdHJ1ZQphbGxvd19ydW5fYXN5bmM6IGZhbHNlCmFsbG93X2N0YXM6IGZhbHNlCmFsbG93X2N2YXM6IGZhbHNlCmFsbG93X2RtbDogZmFsc2UKYWxsb3dfZmlsZV91cGxvYWQ6IGZhbHNlCmV4dHJhOgogIGFsbG93c192aXJ0dWFsX3RhYmxlX2V4cGxvcmU6IHRydWUKdXVpZDogMzcyNzhmOTMtNDZjZS00YjYzLWJhMzMtZWM1NzNmMjBlMDk0CnZlcnNpb246IDEuMC4wClBLAwQUAAAAAAAAACEATLAovQEaAAABGgAAUQAAAGRhc2hib2FyZF9leHBvcnRfMjAyMzA4MDRUMTkzMjIyL2NoYXJ0cy9NYWduaXR1ZGUtRGVwdGgtUmVsYXRpb24tV29ybGR3aWRlXzMueWFtbHNsaWNlX25hbWU6IE1hZ25pdHVkZS1EZXB0aC1SZWxhdGlvbi1Xb3JsZHdpZGUKZGVzY3JpcHRpb246IG51bGwKY2VydGlmaWVkX2J5OiBudWxsCmNlcnRpZmljYXRpb25fZGV0YWlsczogbnVsbAp2aXpfdHlwZTogZWNoYXJ0c190aW1lc2VyaWVzX3NjYXR0ZXIKcGFyYW1zOgogIGRhdGFzb3VyY2U6IDFfX3RhYmxlCiAgdml6X3R5cGU6IGVjaGFydHNfdGltZXNlcmllc19zY2F0dGVyCiAgc2xpY2VfaWQ6IDMKICB4X2F4aXM6IGRlcHRoCiAgdGltZV9ncmFpbl9zcWxhOiBQMUQKICB4X2F4aXNfc29ydF9hc2M6IHRydWUKICB4X2F4aXNfc29ydF9zZXJpZXM6IG5hbWUKICB4X2F4aXNfc29ydF9zZXJpZXNfYXNjZW5kaW5nOiB0cnVlCiAgbWV0cmljczoKICAtIGV4cHJlc3Npb25UeXBlOiBTUUwKICAgIHNxbEV4cHJlc3Npb246ICcgbWFnbml0dWRlJwogICAgY29sdW1uOiBudWxsCiAgICBhZ2dyZWdhdGU6IG51bGwKICAgIGRhdGFzb3VyY2VXYXJuaW5nOiBmYWxzZQogICAgaGFzQ3VzdG9tTGFiZWw6IGZhbHNlCiAgICBsYWJlbDogJyBtYWduaXR1ZGUnCiAgICBvcHRpb25OYW1lOiBtZXRyaWNfamYyZTM4ZTlhaV9pNGF3aXl5NnN1CiAgZ3JvdXBieToKICAtIGxhYmVsOiBtYWduaXR1ZGUKICAgIHNxbEV4cHJlc3Npb246ICcgbWFnbml0dWRlJwogICAgZXhwcmVzc2lvblR5cGU6IFNRTAogIGFkaG9jX2ZpbHRlcnM6CiAgLSBjbGF1c2U6IFdIRVJFCiAgICBjb21wYXJhdG9yOiBObyBmaWx0ZXIKICAgIGV4cHJlc3Npb25UeXBlOiBTSU1QTEUKICAgIG9wZXJhdG9yOiBURU1QT1JBTF9SQU5HRQogICAgc3ViamVjdDogZGF0ZQogIHRpbWVzZXJpZXNfbGltaXRfbWV0cmljOgogICAgZXhwcmVzc2lvblR5cGU6IFNJTVBMRQogICAgY29sdW1uOgogICAgICBhZHZhbmNlZF9kYXRhX3R5cGU6IG51bGwKICAgICAgY2VydGlmaWNhdGlvbl9kZXRhaWxzOiBudWxsCiAgICAgIGNlcnRpZmllZF9ieTogbnVsbAogICAgICBjb2x1bW5fbmFtZTogdGltZXN0YW1wCiAgICAgIGRlc2NyaXB0aW9uOiBudWxsCiAgICAgIGV4cHJlc3Npb246IG51bGwKICAgICAgZmlsdGVyYWJsZTogdHJ1ZQogICAgICBncm91cGJ5OiB0cnVlCiAgICAgIGlkOiA4CiAgICAgIGlzX2NlcnRpZmllZDogZmFsc2UKICAgICAgaXNfZHR0bTogZmFsc2UKICAgICAgcHl0aG9uX2RhdGVfZm9ybWF0OiBudWxsCiAgICAgIHR5cGU6IEJJR0lOVAogICAgICB0eXBlX2dlbmVyaWM6IDAKICAgICAgdmVyYm9zZV9uYW1lOiBudWxsCiAgICAgIHdhcm5pbmdfbWFya2Rvd246IG51bGwKICAgIGFnZ3JlZ2F0ZTogTUFYCiAgICBzcWxFeHByZXNzaW9uOiBudWxsCiAgICBkYXRhc291cmNlV2FybmluZzogZmFsc2UKICAgIGhhc0N1c3RvbUxhYmVsOiBmYWxzZQogICAgbGFiZWw6IE1BWCh0aW1lc3RhbXApCiAgICBvcHRpb25OYW1lOiBtZXRyaWNfZWx3cjBibXptbGVfbWYyNjA5enJ3ZWYKICBvcmRlcl9kZXNjOiB0cnVlCiAgcm93X2xpbWl0OiAxMDAwCiAgdHJ1bmNhdGVfbWV0cmljOiB0cnVlCiAgc2hvd19lbXB0eV9jb2x1bW5zOiB0cnVlCiAgY29tcGFyaXNvbl90eXBlOiB2YWx1ZXMKICByZXNhbXBsZV9tZXRob2Q6IHN1bQogIGFubm90YXRpb25fbGF5ZXJzOiBbXQogIGZvcmVjYXN0UGVyaW9kczogMTAKICBmb3JlY2FzdEludGVydmFsOiAnMScKICB4X2F4aXNfdGl0bGU6IERlcHRoIChrbSkKICB4X2F4aXNfdGl0bGVfbWFyZ2luOiAzMAogIHlfYXhpc190aXRsZTogTWFnbml0dWRlCiAgeV9heGlzX3RpdGxlX21hcmdpbjogMzAKICB5X2F4aXNfdGl0bGVfcG9zaXRpb246IExlZnQKICBzb3J0X3Nlcmllc190eXBlOiBzdW0KICBjb2xvcl9zY2hlbWU6IHN1cGVyc2V0Q29sb3JzCiAgb25seV90b3RhbDogdHJ1ZQogIG1hcmtlclNpemU6IDYKICBzaG93X2xlZ2VuZDogdHJ1ZQogIGxlZ2VuZFR5cGU6IHNjcm9sbAogIGxlZ2VuZE9yaWVudGF0aW9uOiB0b3AKICB4X2F4aXNfdGltZV9mb3JtYXQ6IHNtYXJ0X2RhdGUKICByaWNoX3Rvb2x0aXA6IHRydWUKICB0b29sdGlwU29ydEJ5TWV0cmljOiBmYWxzZQogIHRvb2x0aXBUaW1lRm9ybWF0OiBzbWFydF9kYXRlCiAgeV9heGlzX2Zvcm1hdDogU01BUlRfTlVNQkVSCiAgbG9nQXhpczogZmFsc2UKICBtaW5vclNwbGl0TGluZTogdHJ1ZQogIHRydW5jYXRlWUF4aXM6IGZhbHNlCiAgeV9heGlzX2JvdW5kczoKICAtIG51bGwKICAtIG51bGwKICBleHRyYV9mb3JtX2RhdGE6IHt9CiAgZGFzaGJvYXJkczoKICAtIDIKcXVlcnlfY29udGV4dDogJ3siZGF0YXNvdXJjZSI6eyJpZCI6MSwidHlwZSI6InRhYmxlIn0sImZvcmNlIjpmYWxzZSwicXVlcmllcyI6W3siZmlsdGVycyI6W3siY29sIjoiZGF0ZSIsIm9wIjoiVEVNUE9SQUxfUkFOR0UiLCJ2YWwiOiJObwogIGZpbHRlciJ9XSwiZXh0cmFzIjp7ImhhdmluZyI6IiIsIndoZXJlIjoiIn0sImFwcGxpZWRfdGltZV9leHRyYXMiOnt9LCJjb2x1bW5zIjpbeyJ0aW1lR3JhaW4iOiJQMUQiLCJjb2x1bW5UeXBlIjoiQkFTRV9BWElTIiwic3FsRXhwcmVzc2lvbiI6ImRlcHRoIiwibGFiZWwiOiJkZXB0aCIsImV4cHJlc3Npb25UeXBlIjoiU1FMIn0seyJsYWJlbCI6Im1hZ25pdHVkZSIsInNxbEV4cHJlc3Npb24iOiIKICBtYWduaXR1ZGUiLCJleHByZXNzaW9uVHlwZSI6IlNRTCJ9XSwibWV0cmljcyI6W3siZXhwcmVzc2lvblR5cGUiOiJTUUwiLCJzcWxFeHByZXNzaW9uIjoiCiAgbWFnbml0dWRlIiwiY29sdW1uIjpudWxsLCJhZ2dyZWdhdGUiOm51bGwsImRhdGFzb3VyY2VXYXJuaW5nIjpmYWxzZSwiaGFzQ3VzdG9tTGFiZWwiOmZhbHNlLCJsYWJlbCI6IgogIG1hZ25pdHVkZSIsIm9wdGlvbk5hbWUiOiJtZXRyaWNfamYyZTM4ZTlhaV9pNGF3aXl5NnN1In1dLCJvcmRlcmJ5IjpbW3siZXhwcmVzc2lvblR5cGUiOiJTSU1QTEUiLCJjb2x1bW4iOnsiYWR2YW5jZWRfZGF0YV90eXBlIjpudWxsLCJjZXJ0aWZpY2F0aW9uX2RldGFpbHMiOm51bGwsImNlcnRpZmllZF9ieSI6bnVsbCwiY29sdW1uX25hbWUiOiJ0aW1lc3RhbXAiLCJkZXNjcmlwdGlvbiI6bnVsbCwiZXhwcmVzc2lvbiI6bnVsbCwiZmlsdGVyYWJsZSI6dHJ1ZSwiZ3JvdXBieSI6dHJ1ZSwiaWQiOjgsImlzX2NlcnRpZmllZCI6ZmFsc2UsImlzX2R0dG0iOmZhbHNlLCJweXRob25fZGF0ZV9mb3JtYXQiOm51bGwsInR5cGUiOiJCSUdJTlQiLCJ0eXBlX2dlbmVyaWMiOjAsInZlcmJvc2VfbmFtZSI6bnVsbCwid2FybmluZ19tYXJrZG93biI6bnVsbH0sImFnZ3JlZ2F0ZSI6Ik1BWCIsInNxbEV4cHJlc3Npb24iOm51bGwsImRhdGFzb3VyY2VXYXJuaW5nIjpmYWxzZSwiaGFzQ3VzdG9tTGFiZWwiOmZhbHNlLCJsYWJlbCI6Ik1BWCh0aW1lc3RhbXApIiwib3B0aW9uTmFtZSI6Im1ldHJpY19lbHdyMGJtem1sZV9tZjI2MDl6cndlZiJ9LGZhbHNlXV0sImFubm90YXRpb25fbGF5ZXJzIjpbXSwicm93X2xpbWl0IjoxMDAwLCJzZXJpZXNfY29sdW1ucyI6W3sibGFiZWwiOiJtYWduaXR1ZGUiLCJzcWxFeHByZXNzaW9uIjoiCiAgbWFnbml0dWRlIiwiZXhwcmVzc2lvblR5cGUiOiJTUUwifV0sInNlcmllc19saW1pdCI6MCwic2VyaWVzX2xpbWl0X21ldHJpYyI6eyJleHByZXNzaW9uVHlwZSI6IlNJTVBMRSIsImNvbHVtbiI6eyJhZHZhbmNlZF9kYXRhX3R5cGUiOm51bGwsImNlcnRpZmljYXRpb25fZGV0YWlscyI6bnVsbCwiY2VydGlmaWVkX2J5IjpudWxsLCJjb2x1bW5fbmFtZSI6InRpbWVzdGFtcCIsImRlc2NyaXB0aW9uIjpudWxsLCJleHByZXNzaW9uIjpudWxsLCJmaWx0ZXJhYmxlIjp0cnVlLCJncm91cGJ5Ijp0cnVlLCJpZCI6OCwiaXNfY2VydGlmaWVkIjpmYWxzZSwiaXNfZHR0bSI6ZmFsc2UsInB5dGhvbl9kYXRlX2Zvcm1hdCI6bnVsbCwidHlwZSI6IkJJR0lOVCIsInR5cGVfZ2VuZXJpYyI6MCwidmVyYm9zZV9uYW1lIjpudWxsLCJ3YXJuaW5nX21hcmtkb3duIjpudWxsfSwiYWdncmVnYXRlIjoiTUFYIiwic3FsRXhwcmVzc2lvbiI6bnVsbCwiZGF0YXNvdXJjZVdhcm5pbmciOmZhbHNlLCJoYXNDdXN0b21MYWJlbCI6ZmFsc2UsImxhYmVsIjoiTUFYKHRpbWVzdGFtcCkiLCJvcHRpb25OYW1lIjoibWV0cmljX2Vsd3IwYm16bWxlX21mMjYwOXpyd2VmIn0sIm9yZGVyX2Rlc2MiOnRydWUsInVybF9wYXJhbXMiOnt9LCJjdXN0b21fcGFyYW1zIjp7fSwiY3VzdG9tX2Zvcm1fZGF0YSI6e30sInRpbWVfb2Zmc2V0cyI6W10sInBvc3RfcHJvY2Vzc2luZyI6W3sib3BlcmF0aW9uIjoicGl2b3QiLCJvcHRpb25zIjp7ImluZGV4IjpbImRlcHRoIl0sImNvbHVtbnMiOlsibWFnbml0dWRlIl0sImFnZ3JlZ2F0ZXMiOnsiCiAgbWFnbml0dWRlIjp7Im9wZXJhdG9yIjoibWVhbiJ9fSwiZHJvcF9taXNzaW5nX2NvbHVtbnMiOmZhbHNlfX0seyJvcGVyYXRpb24iOiJyZW5hbWUiLCJvcHRpb25zIjp7ImNvbHVtbnMiOnsiCiAgbWFnbml0dWRlIjpudWxsfSwibGV2ZWwiOjAsImlucGxhY2UiOnRydWV9fSx7Im9wZXJhdGlvbiI6ImZsYXR0ZW4ifV19XSwiZm9ybV9kYXRhIjp7ImRhdGFzb3VyY2UiOiIxX190YWJsZSIsInZpel90eXBlIjoiZWNoYXJ0c190aW1lc2VyaWVzX3NjYXR0ZXIiLCJzbGljZV9pZCI6MywieF9heGlzIjoiZGVwdGgiLCJ0aW1lX2dyYWluX3NxbGEiOiJQMUQiLCJ4X2F4aXNfc29ydF9hc2MiOnRydWUsInhfYXhpc19zb3J0X3NlcmllcyI6Im5hbWUiLCJ4X2F4aXNfc29ydF9zZXJpZXNfYXNjZW5kaW5nIjp0cnVlLCJtZXRyaWNzIjpbeyJleHByZXNzaW9uVHlwZSI6IlNRTCIsInNxbEV4cHJlc3Npb24iOiIKICBtYWduaXR1ZGUiLCJjb2x1bW4iOm51bGwsImFnZ3JlZ2F0ZSI6bnVsbCwiZGF0YXNvdXJjZVdhcm5pbmciOmZhbHNlLCJoYXNDdXN0b21MYWJlbCI6ZmFsc2UsImxhYmVsIjoiCiAgbWFnbml0dWRlIiwib3B0aW9uTmFtZSI6Im1ldHJpY19qZjJlMzhlOWFpX2k0YXdpeXk2c3UifV0sImdyb3VwYnkiOlt7ImxhYmVsIjoibWFnbml0dWRlIiwic3FsRXhwcmVzc2lvbiI6IgogIG1hZ25pdHVkZSIsImV4cHJlc3Npb25UeXBlIjoiU1FMIn1dLCJhZGhvY19maWx0ZXJzIjpbeyJjbGF1c2UiOiJXSEVSRSIsImNvbXBhcmF0b3IiOiJObwogIGZpbHRlciIsImV4cHJlc3Npb25UeXBlIjoiU0lNUExFIiwib3BlcmF0b3IiOiJURU1QT1JBTF9SQU5HRSIsInN1YmplY3QiOiJkYXRlIn1dLCJ0aW1lc2VyaWVzX2xpbWl0X21ldHJpYyI6eyJleHByZXNzaW9uVHlwZSI6IlNJTVBMRSIsImNvbHVtbiI6eyJhZHZhbmNlZF9kYXRhX3R5cGUiOm51bGwsImNlcnRpZmljYXRpb25fZGV0YWlscyI6bnVsbCwiY2VydGlmaWVkX2J5IjpudWxsLCJjb2x1bW5fbmFtZSI6InRpbWVzdGFtcCIsImRlc2NyaXB0aW9uIjpudWxsLCJleHByZXNzaW9uIjpudWxsLCJmaWx0ZXJhYmxlIjp0cnVlLCJncm91cGJ5Ijp0cnVlLCJpZCI6OCwiaXNfY2VydGlmaWVkIjpmYWxzZSwiaXNfZHR0bSI6ZmFsc2UsInB5dGhvbl9kYXRlX2Zvcm1hdCI6bnVsbCwidHlwZSI6IkJJR0lOVCIsInR5cGVfZ2VuZXJpYyI6MCwidmVyYm9zZV9uYW1lIjpudWxsLCJ3YXJuaW5nX21hcmtkb3duIjpudWxsfSwiYWdncmVnYXRlIjoiTUFYIiwic3FsRXhwcmVzc2lvbiI6bnVsbCwiZGF0YXNvdXJjZVdhcm5pbmciOmZhbHNlLCJoYXNDdXN0b21MYWJlbCI6ZmFsc2UsImxhYmVsIjoiTUFYKHRpbWVzdGFtcCkiLCJvcHRpb25OYW1lIjoibWV0cmljX2Vsd3IwYm16bWxlX21mMjYwOXpyd2VmIn0sIm9yZGVyX2Rlc2MiOnRydWUsInJvd19saW1pdCI6MTAwMCwidHJ1bmNhdGVfbWV0cmljIjp0cnVlLCJzaG93X2VtcHR5X2NvbHVtbnMiOnRydWUsImNvbXBhcmlzb25fdHlwZSI6InZhbHVlcyIsInJlc2FtcGxlX21ldGhvZCI6InN1bSIsImFubm90YXRpb25fbGF5ZXJzIjpbXSwiZm9yZWNhc3RQZXJpb2RzIjoxMCwiZm9yZWNhc3RJbnRlcnZhbCI6IjEiLCJ4X2F4aXNfdGl0bGUiOiJEZXB0aAogIChrbSkiLCJ4X2F4aXNfdGl0bGVfbWFyZ2luIjozMCwieV9heGlzX3RpdGxlIjoiTWFnbml0dWRlIiwieV9heGlzX3RpdGxlX21hcmdpbiI6MzAsInlfYXhpc190aXRsZV9wb3NpdGlvbiI6IkxlZnQiLCJzb3J0X3Nlcmllc190eXBlIjoic3VtIiwiY29sb3Jfc2NoZW1lIjoic3VwZXJzZXRDb2xvcnMiLCJvbmx5X3RvdGFsIjp0cnVlLCJtYXJrZXJTaXplIjo2LCJzaG93X2xlZ2VuZCI6dHJ1ZSwibGVnZW5kVHlwZSI6InNjcm9sbCIsImxlZ2VuZE9yaWVudGF0aW9uIjoidG9wIiwieF9heGlzX3RpbWVfZm9ybWF0Ijoic21hcnRfZGF0ZSIsInJpY2hfdG9vbHRpcCI6dHJ1ZSwidG9vbHRpcFNvcnRCeU1ldHJpYyI6ZmFsc2UsInRvb2x0aXBUaW1lRm9ybWF0Ijoic21hcnRfZGF0ZSIsInlfYXhpc19mb3JtYXQiOiJTTUFSVF9OVU1CRVIiLCJsb2dBeGlzIjpmYWxzZSwibWlub3JTcGxpdExpbmUiOnRydWUsInRydW5jYXRlWUF4aXMiOmZhbHNlLCJ5X2F4aXNfYm91bmRzIjpbbnVsbCxudWxsXSwiZXh0cmFfZm9ybV9kYXRhIjp7fSwiZGFzaGJvYXJkcyI6WzJdLCJmb3JjZSI6ZmFsc2UsInJlc3VsdF9mb3JtYXQiOiJqc29uIiwicmVzdWx0X3R5cGUiOiJmdWxsIn0sInJlc3VsdF9mb3JtYXQiOiJqc29uIiwicmVzdWx0X3R5cGUiOiJmdWxsIn0nCmNhY2hlX3RpbWVvdXQ6IG51bGwKdXVpZDogYTcwYjYyZWQtOTg0NS00MTU4LTg1MTgtZTZhYTMzMTZkOGU2CnZlcnNpb246IDEuMC4wCmRhdGFzZXRfdXVpZDogM2FjOTU1Y2UtNGMxMy00MzM5LTgwN2ItN2MxODVjN2MxYzJjClBLAwQUAAAAAAAAACEAiZa+XSkPAAApDwAASAAAAGRhc2hib2FyZF9leHBvcnRfMjAyMzA4MDRUMTkzMjIyL2NoYXJ0cy9FYXJ0aHF1YWtlX0NvdW50X1dvcmxkbWFwXzIueWFtbHNsaWNlX25hbWU6IEVhcnRocXVha2UgQ291bnQgV29ybGRtYXAKZGVzY3JpcHRpb246IG51bGwKY2VydGlmaWVkX2J5OiBudWxsCmNlcnRpZmljYXRpb25fZGV0YWlsczogbnVsbAp2aXpfdHlwZTogZGVja19oZWF0bWFwCnBhcmFtczoKICBkYXRhc291cmNlOiAxX190YWJsZQogIHZpel90eXBlOiBkZWNrX2hlYXRtYXAKICBzbGljZV9pZDogMgogIHNwYXRpYWw6CiAgICB0eXBlOiBsYXRsb25nCiAgICBsYXRDb2w6IGxhdGl0dWRlCiAgICBsb25Db2w6IGxvbmdpdHVkZQogIHNpemU6CiAgICBhZ2dyZWdhdGU6IENPVU5UX0RJU1RJTkNUCiAgICBjb2x1bW46CiAgICAgIGFkdmFuY2VkX2RhdGFfdHlwZTogbnVsbAogICAgICBjZXJ0aWZpY2F0aW9uX2RldGFpbHM6IG51bGwKICAgICAgY2VydGlmaWVkX2J5OiBudWxsCiAgICAgIGNvbHVtbl9uYW1lOiBpZAogICAgICBkZXNjcmlwdGlvbjogbnVsbAogICAgICBleHByZXNzaW9uOiBudWxsCiAgICAgIGZpbHRlcmFibGU6IHRydWUKICAgICAgZ3JvdXBieTogdHJ1ZQogICAgICBpZDogMgogICAgICBpc19jZXJ0aWZpZWQ6IGZhbHNlCiAgICAgIGlzX2R0dG06IGZhbHNlCiAgICAgIHB5dGhvbl9kYXRlX2Zvcm1hdDogbnVsbAogICAgICB0eXBlOiBWQVJDSEFSCiAgICAgIHR5cGVfZ2VuZXJpYzogMQogICAgICB2ZXJib3NlX25hbWU6IG51bGwKICAgICAgd2FybmluZ19tYXJrZG93bjogbnVsbAogICAgZGF0YXNvdXJjZVdhcm5pbmc6IGZhbHNlCiAgICBleHByZXNzaW9uVHlwZTogU0lNUExFCiAgICBoYXNDdXN0b21MYWJlbDogZmFsc2UKICAgIGxhYmVsOiBDT1VOVF9ESVNUSU5DVChpZCkKICAgIG9wdGlvbk5hbWU6IG1ldHJpY19jYmRva3hpcGM5al8wNGZqbnk0bWx4Mm4KICAgIHNxbEV4cHJlc3Npb246IG51bGwKICByb3dfbGltaXQ6IDEwMDAwCiAgZmlsdGVyX251bGxzOiB0cnVlCiAgYWRob2NfZmlsdGVyczoKICAtIGNsYXVzZTogV0hFUkUKICAgIGNvbXBhcmF0b3I6IE5vIGZpbHRlcgogICAgZXhwcmVzc2lvblR5cGU6IFNJTVBMRQogICAgb3BlcmF0b3I6IFRFTVBPUkFMX1JBTkdFCiAgICBzdWJqZWN0OiB0aW1lCiAgaW50ZW5zaXR5OiAxCiAgcmFkaXVzX3BpeGVsczogMjAKICBtYXBib3hfc3R5bGU6IG1hcGJveDovL3N0eWxlcy9tYXBib3gvZGFyay12OQogIHZpZXdwb3J0OgogICAgd2lkdGg6IDEyMzcKICAgIGhlaWdodDogNDA0CiAgICBsYXRpdHVkZTogMzUuNDYwNjY5OTUxNDk1MzA1CiAgICBsb25naXR1ZGU6IDE1LjIxNDM5Mzg0MTM3Nzc5CiAgICB6b29tOiAwCiAgICBiZWFyaW5nOiAwCiAgICBwaXRjaDogMAogICAgYWx0aXR1ZGU6IDEuNQogICAgbWF4Wm9vbTogMjAKICAgIG1pblpvb206IDAKICAgIG1heFBpdGNoOiA2MAogICAgbWluUGl0Y2g6IDAKICBsaW5lYXJfY29sb3Jfc2NoZW1lOiBmaXJlCiAgYXV0b3pvb206IGZhbHNlCiAgYWdncmVnYXRpb246IHN1bQogIGpzX2NvbHVtbnM6IFtdCiAgZXh0cmFfZm9ybV9kYXRhOiB7fQogIGRhc2hib2FyZHM6CiAgLSAyCnF1ZXJ5X2NvbnRleHQ6ICd7ImRhdGFzb3VyY2UiOnsiaWQiOjEsInR5cGUiOiJ0YWJsZSJ9LCJmb3JjZSI6ZmFsc2UsInF1ZXJpZXMiOlt7ImZpbHRlcnMiOlt7ImNvbCI6InRpbWUiLCJvcCI6IlRFTVBPUkFMX1JBTkdFIiwidmFsIjoiTm8KICBmaWx0ZXIifV0sImV4dHJhcyI6eyJoYXZpbmciOiIiLCJ3aGVyZSI6IiJ9LCJhcHBsaWVkX3RpbWVfZXh0cmFzIjp7fSwiY29sdW1ucyI6W10sIm1ldHJpY3MiOlt7ImFnZ3JlZ2F0ZSI6IkNPVU5UX0RJU1RJTkNUIiwiY29sdW1uIjp7ImFkdmFuY2VkX2RhdGFfdHlwZSI6bnVsbCwiY2VydGlmaWNhdGlvbl9kZXRhaWxzIjpudWxsLCJjZXJ0aWZpZWRfYnkiOm51bGwsImNvbHVtbl9uYW1lIjoiaWQiLCJkZXNjcmlwdGlvbiI6bnVsbCwiZXhwcmVzc2lvbiI6bnVsbCwiZmlsdGVyYWJsZSI6dHJ1ZSwiZ3JvdXBieSI6dHJ1ZSwiaWQiOjIsImlzX2NlcnRpZmllZCI6ZmFsc2UsImlzX2R0dG0iOmZhbHNlLCJweXRob25fZGF0ZV9mb3JtYXQiOm51bGwsInR5cGUiOiJWQVJDSEFSIiwidHlwZV9nZW5lcmljIjoxLCJ2ZXJib3NlX25hbWUiOm51bGwsIndhcm5pbmdfbWFya2Rvd24iOm51bGx9LCJkYXRhc291cmNlV2FybmluZyI6ZmFsc2UsImV4cHJlc3Npb25UeXBlIjoiU0lNUExFIiwiaGFzQ3VzdG9tTGFiZWwiOmZhbHNlLCJsYWJlbCI6IkNPVU5UX0RJU1RJTkNUKGlkKSIsIm9wdGlvbk5hbWUiOiJtZXRyaWNfY2Jkb2t4aXBjOWpfMDRmam55NG1seDJuIiwic3FsRXhwcmVzc2lvbiI6bnVsbH1dLCJhbm5vdGF0aW9uX2xheWVycyI6W10sInJvd19saW1pdCI6MTAwMDAsInNlcmllc19saW1pdCI6MCwib3JkZXJfZGVzYyI6dHJ1ZSwidXJsX3BhcmFtcyI6e30sImN1c3RvbV9wYXJhbXMiOnt9LCJjdXN0b21fZm9ybV9kYXRhIjp7fX1dLCJmb3JtX2RhdGEiOnsiZGF0YXNvdXJjZSI6IjFfX3RhYmxlIiwidml6X3R5cGUiOiJkZWNrX2hlYXRtYXAiLCJzbGljZV9pZCI6Miwic3BhdGlhbCI6eyJ0eXBlIjoibGF0bG9uZyIsImxhdENvbCI6ImxhdGl0dWRlIiwibG9uQ29sIjoibG9uZ2l0dWRlIn0sInNpemUiOnsiYWdncmVnYXRlIjoiQ09VTlRfRElTVElOQ1QiLCJjb2x1bW4iOnsiYWR2YW5jZWRfZGF0YV90eXBlIjpudWxsLCJjZXJ0aWZpY2F0aW9uX2RldGFpbHMiOm51bGwsImNlcnRpZmllZF9ieSI6bnVsbCwiY29sdW1uX25hbWUiOiJpZCIsImRlc2NyaXB0aW9uIjpudWxsLCJleHByZXNzaW9uIjpudWxsLCJmaWx0ZXJhYmxlIjp0cnVlLCJncm91cGJ5Ijp0cnVlLCJpZCI6MiwiaXNfY2VydGlmaWVkIjpmYWxzZSwiaXNfZHR0bSI6ZmFsc2UsInB5dGhvbl9kYXRlX2Zvcm1hdCI6bnVsbCwidHlwZSI6IlZBUkNIQVIiLCJ0eXBlX2dlbmVyaWMiOjEsInZlcmJvc2VfbmFtZSI6bnVsbCwid2FybmluZ19tYXJrZG93biI6bnVsbH0sImRhdGFzb3VyY2VXYXJuaW5nIjpmYWxzZSwiZXhwcmVzc2lvblR5cGUiOiJTSU1QTEUiLCJoYXNDdXN0b21MYWJlbCI6ZmFsc2UsImxhYmVsIjoiQ09VTlRfRElTVElOQ1QoaWQpIiwib3B0aW9uTmFtZSI6Im1ldHJpY19jYmRva3hpcGM5al8wNGZqbnk0bWx4Mm4iLCJzcWxFeHByZXNzaW9uIjpudWxsfSwicm93X2xpbWl0IjoxMDAwMCwiZmlsdGVyX251bGxzIjp0cnVlLCJhZGhvY19maWx0ZXJzIjpbeyJjbGF1c2UiOiJXSEVSRSIsImNvbXBhcmF0b3IiOiJObwogIGZpbHRlciIsImV4cHJlc3Npb25UeXBlIjoiU0lNUExFIiwib3BlcmF0b3IiOiJURU1QT1JBTF9SQU5HRSIsInN1YmplY3QiOiJ0aW1lIn1dLCJpbnRlbnNpdHkiOjEsInJhZGl1c19waXhlbHMiOjIwLCJtYXBib3hfc3R5bGUiOiJtYXBib3g6Ly9zdHlsZXMvbWFwYm94L2RhcmstdjkiLCJ2aWV3cG9ydCI6eyJ3aWR0aCI6MTIzNywiaGVpZ2h0Ijo0MDQsImxhdGl0dWRlIjozNS40NjA2Njk5NTE0OTUzMDUsImxvbmdpdHVkZSI6MTUuMjE0MzkzODQxMzc3NzksInpvb20iOjAsImJlYXJpbmciOjAsInBpdGNoIjowLCJhbHRpdHVkZSI6MS41LCJtYXhab29tIjoyMCwibWluWm9vbSI6MCwibWF4UGl0Y2giOjYwLCJtaW5QaXRjaCI6MH0sImxpbmVhcl9jb2xvcl9zY2hlbWUiOiJmaXJlIiwiYXV0b3pvb20iOmZhbHNlLCJhZ2dyZWdhdGlvbiI6InN1bSIsImpzX2NvbHVtbnMiOltdLCJleHRyYV9mb3JtX2RhdGEiOnt9LCJkYXNoYm9hcmRzIjpbMl0sImZvcmNlIjpmYWxzZSwicmVzdWx0X2Zvcm1hdCI6Impzb24iLCJyZXN1bHRfdHlwZSI6ImZ1bGwifSwicmVzdWx0X2Zvcm1hdCI6Impzb24iLCJyZXN1bHRfdHlwZSI6ImZ1bGwifScKY2FjaGVfdGltZW91dDogbnVsbAp1dWlkOiAxN2NmMmIwOC03YmE5LTQzNWQtYjIzYy03NDE2NzcxZDA0NDcKdmVyc2lvbjogMS4wLjAKZGF0YXNldF91dWlkOiAzYWM5NTVjZS00YzEzLTQzMzktODA3Yi03YzE4NWM3YzFjMmMKUEsDBBQAAAAAAAAAIQAvPhkRCw8AAAsPAABFAAAAZGFzaGJvYXJkX2V4cG9ydF8yMDIzMDgwNFQxOTMyMjIvY2hhcnRzL0F2Zy1NYWduaXR1ZGVfV29ybGRtYXBfNS55YW1sc2xpY2VfbmFtZTogQXZnLU1hZ25pdHVkZSBXb3JsZG1hcApkZXNjcmlwdGlvbjogbnVsbApjZXJ0aWZpZWRfYnk6IG51bGwKY2VydGlmaWNhdGlvbl9kZXRhaWxzOiBudWxsCnZpel90eXBlOiBkZWNrX2hlYXRtYXAKcGFyYW1zOgogIGRhdGFzb3VyY2U6IDFfX3RhYmxlCiAgdml6X3R5cGU6IGRlY2tfaGVhdG1hcAogIHNsaWNlX2lkOiA1CiAgc3BhdGlhbDoKICAgIHR5cGU6IGxhdGxvbmcKICAgIGxhdENvbDogbGF0aXR1ZGUKICAgIGxvbkNvbDogbG9uZ2l0dWRlCiAgc2l6ZToKICAgIGFnZ3JlZ2F0ZTogQVZHCiAgICBjb2x1bW46CiAgICAgIGFkdmFuY2VkX2RhdGFfdHlwZTogbnVsbAogICAgICBjZXJ0aWZpY2F0aW9uX2RldGFpbHM6IG51bGwKICAgICAgY2VydGlmaWVkX2J5OiBudWxsCiAgICAgIGNvbHVtbl9uYW1lOiBtYWduaXR1ZGUKICAgICAgZGVzY3JpcHRpb246IG51bGwKICAgICAgZXhwcmVzc2lvbjogbnVsbAogICAgICBmaWx0ZXJhYmxlOiB0cnVlCiAgICAgIGdyb3VwYnk6IHRydWUKICAgICAgaWQ6IDQKICAgICAgaXNfY2VydGlmaWVkOiBmYWxzZQogICAgICBpc19kdHRtOiBmYWxzZQogICAgICBweXRob25fZGF0ZV9mb3JtYXQ6IG51bGwKICAgICAgdHlwZTogRE9VQkxFCiAgICAgIHR5cGVfZ2VuZXJpYzogMAogICAgICB2ZXJib3NlX25hbWU6IG51bGwKICAgICAgd2FybmluZ19tYXJrZG93bjogbnVsbAogICAgZGF0YXNvdXJjZVdhcm5pbmc6IGZhbHNlCiAgICBleHByZXNzaW9uVHlwZTogU0lNUExFCiAgICBoYXNDdXN0b21MYWJlbDogZmFsc2UKICAgIGxhYmVsOiBBVkcobWFnbml0dWRlKQogICAgb3B0aW9uTmFtZTogbWV0cmljX2NiZG9reGlwYzlqXzA0ZmpueTRtbHgybgogICAgc3FsRXhwcmVzc2lvbjogbnVsbAogIHJvd19saW1pdDogMTAwMDAKICBmaWx0ZXJfbnVsbHM6IHRydWUKICBhZGhvY19maWx0ZXJzOgogIC0gY2xhdXNlOiBXSEVSRQogICAgY29tcGFyYXRvcjogTm8gZmlsdGVyCiAgICBleHByZXNzaW9uVHlwZTogU0lNUExFCiAgICBvcGVyYXRvcjogVEVNUE9SQUxfUkFOR0UKICAgIHN1YmplY3Q6IHRpbWUKICBpbnRlbnNpdHk6IDEKICByYWRpdXNfcGl4ZWxzOiAyMAogIG1hcGJveF9zdHlsZTogbWFwYm94Oi8vc3R5bGVzL21hcGJveC9kYXJrLXY5CiAgdmlld3BvcnQ6CiAgICB3aWR0aDogMTIzNwogICAgaGVpZ2h0OiA0MDQKICAgIGxhdGl0dWRlOiAzNS40NjA2Njk5NTE0OTUzMDUKICAgIGxvbmdpdHVkZTogMTYuODc1MzQ5OTk5OTk3NTEKICAgIHpvb206IDAKICAgIGJlYXJpbmc6IDAKICAgIHBpdGNoOiAwCiAgICBhbHRpdHVkZTogMS41CiAgICBtYXhab29tOiAyMAogICAgbWluWm9vbTogMAogICAgbWF4UGl0Y2g6IDYwCiAgICBtaW5QaXRjaDogMAogIGxpbmVhcl9jb2xvcl9zY2hlbWU6IGZpcmUKICBhdXRvem9vbTogZmFsc2UKICBhZ2dyZWdhdGlvbjogc3VtCiAganNfY29sdW1uczogW10KICBleHRyYV9mb3JtX2RhdGE6IHt9CiAgZGFzaGJvYXJkczoKICAtIDIKcXVlcnlfY29udGV4dDogJ3siZGF0YXNvdXJjZSI6eyJpZCI6MSwidHlwZSI6InRhYmxlIn0sImZvcmNlIjpmYWxzZSwicXVlcmllcyI6W3siZmlsdGVycyI6W3siY29sIjoidGltZSIsIm9wIjoiVEVNUE9SQUxfUkFOR0UiLCJ2YWwiOiJObwogIGZpbHRlciJ9XSwiZXh0cmFzIjp7ImhhdmluZyI6IiIsIndoZXJlIjoiIn0sImFwcGxpZWRfdGltZV9leHRyYXMiOnt9LCJjb2x1bW5zIjpbXSwibWV0cmljcyI6W3siYWdncmVnYXRlIjoiQVZHIiwiY29sdW1uIjp7ImFkdmFuY2VkX2RhdGFfdHlwZSI6bnVsbCwiY2VydGlmaWNhdGlvbl9kZXRhaWxzIjpudWxsLCJjZXJ0aWZpZWRfYnkiOm51bGwsImNvbHVtbl9uYW1lIjoibWFnbml0dWRlIiwiZGVzY3JpcHRpb24iOm51bGwsImV4cHJlc3Npb24iOm51bGwsImZpbHRlcmFibGUiOnRydWUsImdyb3VwYnkiOnRydWUsImlkIjo0LCJpc19jZXJ0aWZpZWQiOmZhbHNlLCJpc19kdHRtIjpmYWxzZSwicHl0aG9uX2RhdGVfZm9ybWF0IjpudWxsLCJ0eXBlIjoiRE9VQkxFIiwidHlwZV9nZW5lcmljIjowLCJ2ZXJib3NlX25hbWUiOm51bGwsIndhcm5pbmdfbWFya2Rvd24iOm51bGx9LCJkYXRhc291cmNlV2FybmluZyI6ZmFsc2UsImV4cHJlc3Npb25UeXBlIjoiU0lNUExFIiwiaGFzQ3VzdG9tTGFiZWwiOmZhbHNlLCJsYWJlbCI6IkFWRyhtYWduaXR1ZGUpIiwib3B0aW9uTmFtZSI6Im1ldHJpY19jYmRva3hpcGM5al8wNGZqbnk0bWx4Mm4iLCJzcWxFeHByZXNzaW9uIjpudWxsfV0sImFubm90YXRpb25fbGF5ZXJzIjpbXSwicm93X2xpbWl0IjoxMDAwMCwic2VyaWVzX2xpbWl0IjowLCJvcmRlcl9kZXNjIjp0cnVlLCJ1cmxfcGFyYW1zIjp7fSwiY3VzdG9tX3BhcmFtcyI6e30sImN1c3RvbV9mb3JtX2RhdGEiOnt9fV0sImZvcm1fZGF0YSI6eyJkYXRhc291cmNlIjoiMV9fdGFibGUiLCJ2aXpfdHlwZSI6ImRlY2tfaGVhdG1hcCIsInNsaWNlX2lkIjo1LCJzcGF0aWFsIjp7InR5cGUiOiJsYXRsb25nIiwibGF0Q29sIjoibGF0aXR1ZGUiLCJsb25Db2wiOiJsb25naXR1ZGUifSwic2l6ZSI6eyJhZ2dyZWdhdGUiOiJBVkciLCJjb2x1bW4iOnsiYWR2YW5jZWRfZGF0YV90eXBlIjpudWxsLCJjZXJ0aWZpY2F0aW9uX2RldGFpbHMiOm51bGwsImNlcnRpZmllZF9ieSI6bnVsbCwiY29sdW1uX25hbWUiOiJtYWduaXR1ZGUiLCJkZXNjcmlwdGlvbiI6bnVsbCwiZXhwcmVzc2lvbiI6bnVsbCwiZmlsdGVyYWJsZSI6dHJ1ZSwiZ3JvdXBieSI6dHJ1ZSwiaWQiOjQsImlzX2NlcnRpZmllZCI6ZmFsc2UsImlzX2R0dG0iOmZhbHNlLCJweXRob25fZGF0ZV9mb3JtYXQiOm51bGwsInR5cGUiOiJET1VCTEUiLCJ0eXBlX2dlbmVyaWMiOjAsInZlcmJvc2VfbmFtZSI6bnVsbCwid2FybmluZ19tYXJrZG93biI6bnVsbH0sImRhdGFzb3VyY2VXYXJuaW5nIjpmYWxzZSwiZXhwcmVzc2lvblR5cGUiOiJTSU1QTEUiLCJoYXNDdXN0b21MYWJlbCI6ZmFsc2UsImxhYmVsIjoiQVZHKG1hZ25pdHVkZSkiLCJvcHRpb25OYW1lIjoibWV0cmljX2NiZG9reGlwYzlqXzA0ZmpueTRtbHgybiIsInNxbEV4cHJlc3Npb24iOm51bGx9LCJyb3dfbGltaXQiOjEwMDAwLCJmaWx0ZXJfbnVsbHMiOnRydWUsImFkaG9jX2ZpbHRlcnMiOlt7ImNsYXVzZSI6IldIRVJFIiwiY29tcGFyYXRvciI6Ik5vCiAgZmlsdGVyIiwiZXhwcmVzc2lvblR5cGUiOiJTSU1QTEUiLCJvcGVyYXRvciI6IlRFTVBPUkFMX1JBTkdFIiwic3ViamVjdCI6InRpbWUifV0sImludGVuc2l0eSI6MSwicmFkaXVzX3BpeGVscyI6MjAsIm1hcGJveF9zdHlsZSI6Im1hcGJveDovL3N0eWxlcy9tYXBib3gvZGFyay12OSIsInZpZXdwb3J0Ijp7IndpZHRoIjoxMjM3LCJoZWlnaHQiOjQwNCwibGF0aXR1ZGUiOjM1LjQ2MDY2OTk1MTQ5NTMwNSwibG9uZ2l0dWRlIjoxNi44NzUzNDk5OTk5OTc1MSwiem9vbSI6MCwiYmVhcmluZyI6MCwicGl0Y2giOjAsImFsdGl0dWRlIjoxLjUsIm1heFpvb20iOjIwLCJtaW5ab29tIjowLCJtYXhQaXRjaCI6NjAsIm1pblBpdGNoIjowfSwibGluZWFyX2NvbG9yX3NjaGVtZSI6ImZpcmUiLCJhdXRvem9vbSI6ZmFsc2UsImFnZ3JlZ2F0aW9uIjoic3VtIiwianNfY29sdW1ucyI6W10sImV4dHJhX2Zvcm1fZGF0YSI6e30sImRhc2hib2FyZHMiOlsyXSwiZm9yY2UiOmZhbHNlLCJyZXN1bHRfZm9ybWF0IjoianNvbiIsInJlc3VsdF90eXBlIjoiZnVsbCJ9LCJyZXN1bHRfZm9ybWF0IjoianNvbiIsInJlc3VsdF90eXBlIjoiZnVsbCJ9JwpjYWNoZV90aW1lb3V0OiBudWxsCnV1aWQ6IGQ4ZjFiYTNjLTNmYWQtNDc0NS04YThlLWE5OTQyMzI4ZWU2Ywp2ZXJzaW9uOiAxLjAuMApkYXRhc2V0X3V1aWQ6IDNhYzk1NWNlLTRjMTMtNDMzOS04MDdiLTdjMTg1YzdjMWMyYwpQSwMEFAAAAAAAAAAhAEC7l/RsEAAAbBAAAEkAAABkYXNoYm9hcmRfZXhwb3J0XzIwMjMwODA0VDE5MzIyMi9jaGFydHMvRWFydGhxdWFrZXNfVG9kYXlfV29ybGRtYXBfMS55YW1sc2xpY2VfbmFtZTogRWFydGhxdWFrZXMgVG9kYXkgV29ybGRtYXAKZGVzY3JpcHRpb246IG51bGwKY2VydGlmaWVkX2J5OiBudWxsCmNlcnRpZmljYXRpb25fZGV0YWlsczogbnVsbAp2aXpfdHlwZTogZGVja19zY3JlZW5ncmlkCnBhcmFtczoKICBkYXRhc291cmNlOiAxX190YWJsZQogIHZpel90eXBlOiBkZWNrX3NjcmVlbmdyaWQKICBzbGljZV9pZDogMQogIHNwYXRpYWw6CiAgICB0eXBlOiBsYXRsb25nCiAgICBsYXRDb2w6IGxhdGl0dWRlCiAgICBsb25Db2w6IGxvbmdpdHVkZQogIHNpemU6CiAgICBhZ2dyZWdhdGU6IENPVU5UCiAgICBjb2x1bW46CiAgICAgIGFkdmFuY2VkX2RhdGFfdHlwZTogbnVsbAogICAgICBjZXJ0aWZpY2F0aW9uX2RldGFpbHM6IG51bGwKICAgICAgY2VydGlmaWVkX2J5OiBudWxsCiAgICAgIGNvbHVtbl9uYW1lOiBpZAogICAgICBkZXNjcmlwdGlvbjogbnVsbAogICAgICBleHByZXNzaW9uOiBudWxsCiAgICAgIGZpbHRlcmFibGU6IHRydWUKICAgICAgZ3JvdXBieTogdHJ1ZQogICAgICBpZDogNzgKICAgICAgaXNfY2VydGlmaWVkOiBmYWxzZQogICAgICBpc19kdHRtOiBmYWxzZQogICAgICBweXRob25fZGF0ZV9mb3JtYXQ6IG51bGwKICAgICAgdHlwZTogVkFSQ0hBUgogICAgICB0eXBlX2dlbmVyaWM6IDEKICAgICAgdmVyYm9zZV9uYW1lOiBudWxsCiAgICAgIHdhcm5pbmdfbWFya2Rvd246IG51bGwKICAgIGRhdGFzb3VyY2VXYXJuaW5nOiBmYWxzZQogICAgZXhwcmVzc2lvblR5cGU6IFNJTVBMRQogICAgaGFzQ3VzdG9tTGFiZWw6IGZhbHNlCiAgICBsYWJlbDogQ09VTlQoaWQpCiAgICBvcHRpb25OYW1lOiBtZXRyaWNfa2lwbTJlbXA5bHNfbmh1ZG05OHNwbAogICAgc3FsRXhwcmVzc2lvbjogbnVsbAogIHJvd19saW1pdDogMTAwMDAKICBmaWx0ZXJfbnVsbHM6IHRydWUKICBhZGhvY19maWx0ZXJzOgogIC0gZXhwcmVzc2lvblR5cGU6IFNJTVBMRQogICAgc3ViamVjdDogZGF0ZXRpbWVfdXRjCiAgICBvcGVyYXRvcjogVEVNUE9SQUxfUkFOR0UKICAgIG9wZXJhdG9ySWQ6IFRFTVBPUkFMX1JBTkdFCiAgICBjb21wYXJhdG9yOiAndG9kYXkgOiBub3cnCiAgICBjbGF1c2U6IFdIRVJFCiAgICBzcWxFeHByZXNzaW9uOiBudWxsCiAgICBpc0V4dHJhOiBmYWxzZQogICAgaXNOZXc6IGZhbHNlCiAgICBkYXRhc291cmNlV2FybmluZzogZmFsc2UKICAgIGZpbHRlck9wdGlvbk5hbWU6IGZpbHRlcl9jaTAxcTdud3c4N18wM29oc3RsNWN3eTgKICBtYXBib3hfc3R5bGU6IG1hcGJveDovL3N0eWxlcy9tYXBib3gvZGFyay12OQogIHZpZXdwb3J0OgogICAgd2lkdGg6IDEyMzcKICAgIGhlaWdodDogNDA0CiAgICBsYXRpdHVkZTogMjkuNjU4MjA0NzAyMTYwNjM1CiAgICBsb25naXR1ZGU6IC04NS40MDI0MjUzOTM3MDA0NAogICAgem9vbTogMS4xMTE1MjQ3NDE4MjIyMzg1CiAgICBiZWFyaW5nOiAwCiAgICBwaXRjaDogMAogICAgYWx0aXR1ZGU6IDEuNQogICAgbWF4Wm9vbTogMjAKICAgIG1pblpvb206IDAKICAgIG1heFBpdGNoOiA2MAogICAgbWluUGl0Y2g6IDAKICBhdXRvem9vbTogZmFsc2UKICBncmlkX3NpemU6IDEwCiAgY29sb3JfcGlja2VyOgogICAgYTogMQogICAgYjogNjIKICAgIGc6IDM5CiAgICByOiAyMjQKICBqc19jb2x1bW5zOiBbXQogIGV4dHJhX2Zvcm1fZGF0YToge30KICBkYXNoYm9hcmRzOgogIC0gMgpxdWVyeV9jb250ZXh0OiAneyJkYXRhc291cmNlIjp7ImlkIjoxLCJ0eXBlIjoidGFibGUifSwiZm9yY2UiOmZhbHNlLCJxdWVyaWVzIjpbeyJmaWx0ZXJzIjpbeyJjb2wiOiJkYXRldGltZV91dGMiLCJvcCI6IlRFTVBPUkFMX1JBTkdFIiwidmFsIjoidG9kYXkKICA6IG5vdyJ9XSwiZXh0cmFzIjp7ImhhdmluZyI6IiIsIndoZXJlIjoiIn0sImFwcGxpZWRfdGltZV9leHRyYXMiOnt9LCJjb2x1bW5zIjpbXSwibWV0cmljcyI6W3siYWdncmVnYXRlIjoiQ09VTlQiLCJjb2x1bW4iOnsiYWR2YW5jZWRfZGF0YV90eXBlIjpudWxsLCJjZXJ0aWZpY2F0aW9uX2RldGFpbHMiOm51bGwsImNlcnRpZmllZF9ieSI6bnVsbCwiY29sdW1uX25hbWUiOiJpZCIsImRlc2NyaXB0aW9uIjpudWxsLCJleHByZXNzaW9uIjpudWxsLCJmaWx0ZXJhYmxlIjp0cnVlLCJncm91cGJ5Ijp0cnVlLCJpZCI6NzgsImlzX2NlcnRpZmllZCI6ZmFsc2UsImlzX2R0dG0iOmZhbHNlLCJweXRob25fZGF0ZV9mb3JtYXQiOm51bGwsInR5cGUiOiJWQVJDSEFSIiwidHlwZV9nZW5lcmljIjoxLCJ2ZXJib3NlX25hbWUiOm51bGwsIndhcm5pbmdfbWFya2Rvd24iOm51bGx9LCJkYXRhc291cmNlV2FybmluZyI6ZmFsc2UsImV4cHJlc3Npb25UeXBlIjoiU0lNUExFIiwiaGFzQ3VzdG9tTGFiZWwiOmZhbHNlLCJsYWJlbCI6IkNPVU5UKGlkKSIsIm9wdGlvbk5hbWUiOiJtZXRyaWNfa2lwbTJlbXA5bHNfbmh1ZG05OHNwbCIsInNxbEV4cHJlc3Npb24iOm51bGx9XSwiYW5ub3RhdGlvbl9sYXllcnMiOltdLCJyb3dfbGltaXQiOjEwMDAwLCJzZXJpZXNfbGltaXQiOjAsIm9yZGVyX2Rlc2MiOnRydWUsInVybF9wYXJhbXMiOnt9LCJjdXN0b21fcGFyYW1zIjp7fSwiY3VzdG9tX2Zvcm1fZGF0YSI6e319XSwiZm9ybV9kYXRhIjp7ImRhdGFzb3VyY2UiOiIxX190YWJsZSIsInZpel90eXBlIjoiZGVja19zY3JlZW5ncmlkIiwic2xpY2VfaWQiOjEsInNwYXRpYWwiOnsidHlwZSI6ImxhdGxvbmciLCJsYXRDb2wiOiJsYXRpdHVkZSIsImxvbkNvbCI6ImxvbmdpdHVkZSJ9LCJzaXplIjp7ImFnZ3JlZ2F0ZSI6IkNPVU5UIiwiY29sdW1uIjp7ImFkdmFuY2VkX2RhdGFfdHlwZSI6bnVsbCwiY2VydGlmaWNhdGlvbl9kZXRhaWxzIjpudWxsLCJjZXJ0aWZpZWRfYnkiOm51bGwsImNvbHVtbl9uYW1lIjoiaWQiLCJkZXNjcmlwdGlvbiI6bnVsbCwiZXhwcmVzc2lvbiI6bnVsbCwiZmlsdGVyYWJsZSI6dHJ1ZSwiZ3JvdXBieSI6dHJ1ZSwiaWQiOjc4LCJpc19jZXJ0aWZpZWQiOmZhbHNlLCJpc19kdHRtIjpmYWxzZSwicHl0aG9uX2RhdGVfZm9ybWF0IjpudWxsLCJ0eXBlIjoiVkFSQ0hBUiIsInR5cGVfZ2VuZXJpYyI6MSwidmVyYm9zZV9uYW1lIjpudWxsLCJ3YXJuaW5nX21hcmtkb3duIjpudWxsfSwiZGF0YXNvdXJjZVdhcm5pbmciOmZhbHNlLCJleHByZXNzaW9uVHlwZSI6IlNJTVBMRSIsImhhc0N1c3RvbUxhYmVsIjpmYWxzZSwibGFiZWwiOiJDT1VOVChpZCkiLCJvcHRpb25OYW1lIjoibWV0cmljX2tpcG0yZW1wOWxzX25odWRtOThzcGwiLCJzcWxFeHByZXNzaW9uIjpudWxsfSwicm93X2xpbWl0IjoxMDAwMCwiZmlsdGVyX251bGxzIjp0cnVlLCJhZGhvY19maWx0ZXJzIjpbeyJleHByZXNzaW9uVHlwZSI6IlNJTVBMRSIsInN1YmplY3QiOiJkYXRldGltZV91dGMiLCJvcGVyYXRvciI6IlRFTVBPUkFMX1JBTkdFIiwib3BlcmF0b3JJZCI6IlRFTVBPUkFMX1JBTkdFIiwiY29tcGFyYXRvciI6InRvZGF5CiAgOiBub3ciLCJjbGF1c2UiOiJXSEVSRSIsInNxbEV4cHJlc3Npb24iOm51bGwsImlzRXh0cmEiOmZhbHNlLCJpc05ldyI6ZmFsc2UsImRhdGFzb3VyY2VXYXJuaW5nIjpmYWxzZSwiZmlsdGVyT3B0aW9uTmFtZSI6ImZpbHRlcl9jaTAxcTdud3c4N18wM29oc3RsNWN3eTgifV0sIm1hcGJveF9zdHlsZSI6Im1hcGJveDovL3N0eWxlcy9tYXBib3gvZGFyay12OSIsInZpZXdwb3J0Ijp7IndpZHRoIjoxMjM3LCJoZWlnaHQiOjQwNCwibGF0aXR1ZGUiOjI5LjY1ODIwNDcwMjE2MDYzNSwibG9uZ2l0dWRlIjotODUuNDAyNDI1MzkzNzAwNDQsInpvb20iOjEuMTExNTI0NzQxODIyMjM4NSwiYmVhcmluZyI6MCwicGl0Y2giOjAsImFsdGl0dWRlIjoxLjUsIm1heFpvb20iOjIwLCJtaW5ab29tIjowLCJtYXhQaXRjaCI6NjAsIm1pblBpdGNoIjowfSwiYXV0b3pvb20iOmZhbHNlLCJncmlkX3NpemUiOjEwLCJjb2xvcl9waWNrZXIiOnsiYSI6MSwiYiI6NjIsImciOjM5LCJyIjoyMjR9LCJqc19jb2x1bW5zIjpbXSwiZXh0cmFfZm9ybV9kYXRhIjp7fSwiZGFzaGJvYXJkcyI6WzJdLCJmb3JjZSI6ZmFsc2UsInJlc3VsdF9mb3JtYXQiOiJqc29uIiwicmVzdWx0X3R5cGUiOiJmdWxsIn0sInJlc3VsdF9mb3JtYXQiOiJqc29uIiwicmVzdWx0X3R5cGUiOiJmdWxsIn0nCmNhY2hlX3RpbWVvdXQ6IG51bGwKdXVpZDogOTU5NTkzYjgtNmQ2Ny00YjRlLWE2ZjAtZjNjYTU3MTFhOTNhCnZlcnNpb246IDEuMC4wCmRhdGFzZXRfdXVpZDogM2FjOTU1Y2UtNGMxMy00MzM5LTgwN2ItN2MxODVjN2MxYzJjClBLAQIUAxQAAAAAAAAAIQB2+OzGTQAAAE0AAAAuAAAAAAAAAAAAAACAAQAAAABkYXNoYm9hcmRfZXhwb3J0XzIwMjMwODA0VDE5MzIyMi9tZXRhZGF0YS55YW1sUEsBAhQDFAAAAAAAAAAhAPZkviz5IAAA+SAAADkAAAAAAAAAAAAAAIABmQAAAGRhc2hib2FyZF9leHBvcnRfMjAyMzA4MDRUMTkzMjIyL2Rhc2hib2FyZHMvQmFzaWNzXzIueWFtbFBLAQIUAxQAAAAAAAAAIQBCI7a0FRYAABUWAABJAAAAAAAAAAAAAACAAekhAABkYXNoYm9hcmRfZXhwb3J0XzIwMjMwODA0VDE5MzIyMi9jaGFydHMvTWFnbml0dWRlLUNvdW50cy1Xb3JsZHdpZGVfNC55YW1sUEsBAhQDFAAAAAAAAAAhAJSdCjzICwAAyAsAAD0AAAAAAAAAAAAAAIABZTgAAGRhc2hib2FyZF9leHBvcnRfMjAyMzA4MDRUMTkzMjIyL2RhdGFzZXRzL1RyaW5vL0VRX0Jhc2ljLnlhbWxQSwECFAMUAAAAAAAAACEA8cKNhEMBAABDAQAANQAAAAAAAAAAAAAAgAGIRAAAZGFzaGJvYXJkX2V4cG9ydF8yMDIzMDgwNFQxOTMyMjIvZGF0YWJhc2VzL1RyaW5vLnlhbWxQSwECFAMUAAAAAAAAACEATLAovQEaAAABGgAAUQAAAAAAAAAAAAAAgAEeRgAAZGFzaGJvYXJkX2V4cG9ydF8yMDIzMDgwNFQxOTMyMjIvY2hhcnRzL01hZ25pdHVkZS1EZXB0aC1SZWxhdGlvbi1Xb3JsZHdpZGVfMy55YW1sUEsBAhQDFAAAAAAAAAAhAImWvl0pDwAAKQ8AAEgAAAAAAAAAAAAAAIABjmAAAGRhc2hib2FyZF9leHBvcnRfMjAyMzA4MDRUMTkzMjIyL2NoYXJ0cy9FYXJ0aHF1YWtlX0NvdW50X1dvcmxkbWFwXzIueWFtbFBLAQIUAxQAAAAAAAAAIQAvPhkRCw8AAAsPAABFAAAAAAAAAAAAAACAAR1wAABkYXNoYm9hcmRfZXhwb3J0XzIwMjMwODA0VDE5MzIyMi9jaGFydHMvQXZnLU1hZ25pdHVkZV9Xb3JsZG1hcF81LnlhbWxQSwECFAMUAAAAAAAAACEAQLuX9GwQAABsEAAASQAAAAAAAAAAAAAAgAGLfwAAZGFzaGJvYXJkX2V4cG9ydF8yMDIzMDgwNFQxOTMyMjIvY2hhcnRzL0VhcnRocXVha2VzX1RvZGF5X1dvcmxkbWFwXzEueWFtbFBLBQYAAAAACQAJAOcDAABekAAAAAA=
stringData:
  init-dashboard.py: |
    import requests

    endpoint = "http://superset-lb.default.svc.cluster.local:8088"
    username = "api"
    password = "superset#api+User"

    def getJwtToken(endpoint, username, password):
        jwt_token = ""
        req_url = endpoint+"/api/v1/security/login"
        #request jwt access token
        req_params = {
        "password": password,
        "provider": "db",
        "refresh": "false",
        "username": username
        }
        resp_token = requests.post(req_url, json=req_params)
        # Check the response
        if resp_token.status_code == 200:
            print("APP-INFO: Got JWT access token successfully!")
            jwt_token = resp_token.json()["access_token"]
            # print("JWT-Token: " + jwt_token)
        else:
            print("APP-ERROR: Failed requesting JWT access token. Status code:", resp_token.status_code, resp_token.content)
            exit(1)
        return jwt_token

    def importDashboard(endpoint, jwt_token, filePath):
        # Path to the file you want to upload
        post_url = endpoint+"/api/v1/dashboard/import/"
        # Send the file in the request
        files = {'formData': (open(filePath, 'rb'))}
        resp_file = requests.post(post_url, files=files, headers={"Authorization": f"Bearer  {jwt_token}"})
        
        # Check the response
        if resp_file.status_code == 200:
            print("APP-INFO: File uploaded successfully!")
        else:
            print("APP-ERROR: Failed uploading the file. Status code:", resp_file.status_code, resp_file.content)
            exit(1)

    try: 
        jwt_token = getJwtToken(endpoint=endpoint, username=username, password=password)
        importDashboard(endpoint=endpoint, jwt_token=jwt_token, filePath="/scripts/dashboard_export.zip")
        print("APP-INFO: Finished job")
        exit(0)
    except Exception as e:
        print("APP-EXEPTION: ", e)
        exit(1)


